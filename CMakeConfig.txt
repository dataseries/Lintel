#
# (c) Copyright 2008, Hewlett-Packard Development Company, LP
#
#  See the file named COPYING for license details
#
# All of the options and dependencies for the various cmake sub-bits

#### Default build type

IF(NOT CMAKE_BUILD_TYPE)
    MESSAGE("WARNING: you did not set a CMAKE_BUILD_TYPE; assuming RelWithDebInfo")
    SET(CMAKE_BUILD_TYPE RelWithDebInfo)
ENDIF(NOT CMAKE_BUILD_TYPE)

##### Required bits

INCLUDE(FindBoost)
IF(NOT Boost_FOUND)
    MESSAGE(FATAL_ERROR "ERROR: Could NOT find the Boost includes and libraries")
ENDIF(NOT Boost_FOUND)

# only needed for buildTcl
FIND_PROGRAM(AWK_PATH awk)
IF(NOT AWK_PATH)
    MESSAGE("WARNING: Could NOT find awk, TCL support will be disabled")
ENDIF(NOT AWK_PATH)

# TODO: what is perl needed for?
FIND_PROGRAM(PERL_BINARY perl)
IF (NOT PERL_BINARY)
    MESSAGE(FATAL_ERROR "ERROR: Could NOT find perl")
ENDIF(NOT PERL_BINARY)

##### Optional bits

OPTION(ENABLE_STDIO64 "Enable 64 bit stdio bits")
OPTION(ENABLE_CLOCK_TEST "Enable the cycle-counter clock test; has trouble in virtual machines" ON)

### Library type

OPTION(BUILD_SHARED_LIBS "Should we build shared libraries" ON)
IF(BUILD_SHARED_LIBS)
    SET(LIBRARY_TYPE SHARED)
ELSE(BUILD_SHARED_LIBS)
    SET(LIBRARY_TYPE STATIC)
ENDIF(BUILD_SHARED_LIBS)

### Documentation

INCLUDE(LintelDocs)

LINTEL_DOCS_CONFIG("Lintel")

### TCL

INCLUDE(FindTCL)
OPTION(WITH_TCL "Use tcl if it is found?" On)
IF(TCL_INCLUDE_PATH AND TCL_LIBRARY AND WITH_TCL AND AWK_PATH)
    SET(TCL_ENABLED ON)
ELSE(TCL_INCLUDE_PATH AND TCL_LIBRARY AND WITH_TCL AND AWK_PATH)
    SET(TCL_ENABLED OFF)
ENDIF(TCL_INCLUDE_PATH AND TCL_LIBRARY AND WITH_TCL AND AWK_PATH)

IF(WITH_TCL AND NOT TCL_ENABLED)
    MESSAGE("WITH_TCL on, but could not find tcl includes/libraries.\n  Lintel TCL libraries support will be skipped.")
ENDIF(WITH_TCL AND NOT TCL_ENABLED)

### Threads

INCLUDE(FindThreads)
OPTION(WITH_THREADS "Try to build with thread (pthread right now) support?" On)
IF(CMAKE_HAVE_THREADS_LIBRARY AND CMAKE_HAVE_PTHREAD_H AND WITH_THREADS)
    SET(THREADS_ENABLED ON)
ELSE(CMAKE_HAVE_THREADS_LIBRARY AND CMAKE_HAVE_PTHREAD_H AND WITH_THREADS)
    SET(THREADS_ENABLED OFF)
ENDIF(CMAKE_HAVE_THREADS_LIBRARY AND CMAKE_HAVE_PTHREAD_H AND WITH_THREADS)

IF(WITH_THREADS AND NOT THREADS_ENABLED)
    MESSAGE("WITH_THREADS on, but could not find pthread includes/libraries.")
    MESSAGE("  LintelPThread library will be skipped.")
ENDIF(WITH_THREADS AND NOT THREADS_ENABLED)

IF(WITH_THREADS AND THREADS_ENABLED)
    IF(HAS_PTHREAD_ISLOCKED)
        SET(PTHREAD_ISLOCKED_QUIET ON)
    ELSE(HAS_PTHREAD_ISLOCKED)
        INCLUDE(LintelCMakeUtil)
        MESSAGE("Determining expression for PThreadMutex::isLocked()")
        EXECUTE_PROCESS(COMMAND uname OUTPUT_VARIABLE HOST_TYPE
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
        IF(0)
        ELSEIF("${HOST_TYPE}" STREQUAL "HP-UX")
            SET(TMP_HAS_PTHREAD_ISLOCKED 1)
    	    SET(TMP_PTHREAD_ISLOCKED_EXPR "((char *)&m)[67] == 0")
        ELSEIF("${HOST_TYPE}" STREQUAL "Linux")
	    LINTEL_TRY_RUN(LINUX_ISLOCKED_1 config/linux-islocked-1.cpp
	                   CMAKE_FLAGS -DLINK_LIBRARIES=-lpthread)
	    LINTEL_TRY_RUN(LINUX_ISLOCKED_2 config/linux-islocked-2.cpp
	                   CMAKE_FLAGS -DLINK_LIBRARIES=-lpthread)
	    LINTEL_TRY_RUN(LINUX_ISLOCKED_3 config/linux-islocked-3.cpp
	                   CMAKE_FLAGS -DLINK_LIBRARIES=-lpthread)
            IF(0)    
            ELSEIF(LINUX_ISLOCKED_1)
                SET(TMP_HAS_PTHREAD_ISLOCKED 1)
                SET(TMP_PTHREAD_ISLOCKED_EXPR "m.__m_lock.__status != 0")
            ELSEIF(LINUX_ISLOCKED_2)
                SET(TMP_HAS_PTHREAD_ISLOCKED 1)
                SET(TMP_PTHREAD_ISLOCKED_EXPR "m.__data.__lock != 0")
            ELSEIF(LINUX_ISLOCKED_3)
                SET(TMP_HAS_PTHREAD_ISLOCKED 1)
                SET(TMP_PTHREAD_ISLOCKED_EXPR "m.__m_reserved != 0")
            ELSE(0)
                SET(TMP_HAS_PTHREAD_ISLOCKED 0)
            ENDIF(0)
        ELSE(0)
            SET(TMP_HAS_PTHREAD_ISLOCKED 0)
        ENDIF(0)
    
        SET(HAS_PTHREAD_ISLOCKED ${TMP_HAS_PTHREAD_ISLOCKED} CACHE INTERNAL 
            "do we have islocked" FORCE)
        SET(PTHREAD_ISLOCKED_EXPR "${TMP_PTHREAD_ISLOCKED_EXPR}" CACHE INTERNAL
           "what expression calculates islocked?" FORCE)
    ENDIF(HAS_PTHREAD_ISLOCKED)

    IF(HAS_PTHREAD_ISLOCKED)
        IF(NOT PTHREAD_ISLOCKED_QUIET)
            MESSAGE("  Success, using ${PTHREAD_ISLOCKED_EXPR}")
        ENDIF(NOT PTHREAD_ISLOCKED_QUIET)
    ELSE(HAS_PTHREAD_ISLOCKED)
        MESSAGE("  Unable to figure out how to determine if a mutex is locked")
    ENDIF(HAS_PTHREAD_ISLOCKED)
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/include/Lintel/PThread.hpp.in
                   ${CMAKE_CURRENT_BINARY_DIR}/include/Lintel/PThread.hpp
                   @ONLY)
ENDIF(WITH_THREADS AND THREADS_ENABLED)

### LibXML2

INCLUDE(FindLibXml2)
OPTION(WITH_LIBXML2 "Use the libxml2 library if it is found?" On)
IF(LIBXML2_FOUND AND WITH_LIBXML2)
    SET(LIBXML2_ENABLED ON)
ELSE(LIBXML2_FOUND AND WITH_LIBXML2)
    SET(LIBXML2_ENABLED OFF)
ENDIF(LIBXML2_FOUND AND WITH_LIBXML2)

IF(WITH_LIBXML2 AND NOT LIBXML2_ENABLED)
    MESSAGE("WITH_LIBXML2 on, but could not find libxml2 includes/libraries.")
    MESSAGE("  XMLUtil and LintelLogXML will be skipped.")
ENDIF(WITH_LIBXML2 AND NOT LIBXML2_ENABLED)

### RPath

OPTION(WITH_INSTALLED_RPATH "Install with the rpath set so you will not need to set \$LD_LIBRARY_PATH" ON)

IF(WITH_INSTALLED_RPATH)
    # use, i.e. don't skip the full RPATH for the build tree
    SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
  
    # when building, don't use the install RPATH already
    # (but later on when installing)
    SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
  
    # the RPATH to be used when installing
    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
  
    # add the automatically determined parts of the RPATH
    # which point to directories outside the build tree to the install RPATH
    SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
ENDIF(WITH_INSTALLED_RPATH)

### Latex

INCLUDE(FindLATEX)
FIND_PROGRAM(PS2PDF14_CONVERTER
  NAMES ps2pdf14
  PATHS ${MIKTEX_BINARY_PATH} 
        /usr/bin
)

OPTION(WITH_LATEX "Include the latex rebuild script (requires latex, bibtex, dvips, ps2pdf14)" On)
IF(WITH_LATEX)
    IF(LATEX_COMPILER AND BIBTEX_COMPILER AND DVIPS_CONVERTER 
       AND PS2PDF14_CONVERTER)
        SET(LATEX_ENABLED ON)
    ELSE(LATEX_COMPILER AND BIBTEX_COMPILER AND DVIPS_CONVERTER 
         AND PS2PDF14_CONVERTER)
        SET(LATEX_ENABLED OFF)
    ENDIF(LATEX_COMPILER AND BIBTEX_COMPILER AND DVIPS_CONVERTER 
          AND PS2PDF14_CONVERTER)

    IF(NOT LATEX_ENABLED) 
        MESSAGE("WITH_LATEX on, but could not find latex, bibtex, dvips, ps2pdf14")
    ENDIF(NOT LATEX_ENABLED) 
ENDIF(WITH_LATEX)

