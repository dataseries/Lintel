/* -*- C++ -*-
   (c) Copyright 2000-2008, Hewlett-Packard Development Company, LP

   See the file named COPYING for license details
*/

/** @file
    \brief Interface to ptheads from C++
*/

#ifndef LINTEL_PTHREAD_HPP
#define LINTEL_PTHREAD_HPP
#include <pthread.h>
#include <errno.h>
#include <string.h>

#include <boost/function.hpp>
#include <boost/utility.hpp>

#include <Lintel/AssertBoost.hpp>
#include <Lintel/Clock.hpp>
#include <Lintel/LockOrderingGroup.hpp>
#include <Lintel/PointerUtil.hpp>

#if __linux__
extern "C" {
  int pthread_mutexattr_setkind_np(pthread_mutexattr_t *attr, int kind);
}
#endif

/// \brief Misc pthread-related functions
class PThreadMisc { // should be a namespace if we believe everyone supports those
public:
    static int getCurrentCPU(bool unknown_ok = false);
    /// Return the number of CPUs on the current host.  If unknown_ok is true,
    /// return -1 if we can not figure out the number of CPUs.
    static int getNCpus(bool unknown_ok = false);
};	   

/** \brief PThread abstraction class
 *
 * you can call the start function multiple times on this class, this
 * is potentially useful if your threads don't have any per-thread
 * state.  We don't bother to take out locks in these functions
 * because it's expected people will start all their threads from a
 * "master" thread, so the locking is unnecessary.  
 * technically this is copyable, but it's probably not what you wanted. */
class PThread : boost::noncopyable { 
public:
    PThread();
    virtual ~PThread();

    void setDetached(bool detached = true);
    size_t getStackSize();
    void setStackSize(size_t size);
    size_t getGuardSize();
    void setGuardSize(size_t size);

    // override this function to do whatever work you want in your
    // thread.  Return value will be provided for people joining with
    // a thread.

    virtual void *run() = 0;
    virtual pthread_t start();
    void *join();
    int kill(int sig);

private:
    bool thread_live;
    pthread_t last_tid;
    pthread_attr_t attr;
};

/** \brief PThread class that blocks signals
 *
 * PThreadNoSignals is a sublcass of PThread that blocks all signals
 * in created threads.  This is usually what you want -- it is often
 * best to let one thread (e.g. the master thread) take all signals.
 *
 * You may enable any signals that you really do want by calling
 * pthread_sigmask(2) in your run() method.
 *
 * As with PThread, it's expected people will start all their threads
 * from a "master" thread.
 */
class PThreadNoSignals : public PThread {
public:
    virtual pthread_t start();
};

/** \brief PThread class that will execute a boost function to start.  For classes that want worker
    threads, this provides a simple way to make them without having a helper class, e.g. they can
    write pthread_worker = new PThreadFunction(boost::bind(&Class::worker, this));
    pthread_worker->start() */

class PThreadFunction : public PThreadNoSignals {
public:
    PThreadFunction(const boost::function<void * ()> &fn) : fn(fn) { }

    virtual void *run();
private:
    boost::function<void * ()> fn;
};

/// \brief Mutex that can only be used in scoped locks
class PThreadScopedOnlyMutex : boost::noncopyable {
public:
#if LINTEL_DEBUG
#define LINTEL_PTHREAD_DEFAULT_ERRORCHECK true
#else
#define LINTEL_PTHREAD_DEFAULT_ERRORCHECK false
#endif
    PThreadScopedOnlyMutex(bool errorcheck = LINTEL_PTHREAD_DEFAULT_ERRORCHECK);
    ~PThreadScopedOnlyMutex();

    bool isLocked() const {
#define LINTEL_PTHREAD_ISLOCKED_AVAILABLE @HAS_PTHREAD_ISLOCKED@
#if @HAS_PTHREAD_ISLOCKED@
	return @PTHREAD_ISLOCKED_EXPR@;
#else
	FATAL_ERROR("don't know how to implement PThreadMutex.islocked() on this platform");
#endif
    }

    unsigned getContention() const{ 
	return ncontention;
    }

    std::string debugInfo() const;

protected:
    bool trylock() {
        int ret = pthread_mutex_trylock(&m);
        if (ret == 0) {
            return true;
        }
        INVARIANT(ret == EBUSY, boost::format("Invalid error(%d,%s) on trylock") 
		  % ret % strerror(ret));
        return false;
    }

    bool timedLock(const struct timespec &abs_timeout) {
	int ret = pthread_mutex_timedlock(&m, &abs_timeout);
	if (ret == 0) {
	    return true;
	}
	INVARIANT(ret == ETIMEDOUT,
		  boost::format("Invalid error(%d, %s) on timedlock") % ret % strerror(ret));
	return false;
    }
	
    void lock() {
	if (trylock()) {
	    return;
	}
	int ret = pthread_mutex_lock(&m);
	INVARIANT(ret==0, boost::format("pthread_mutex_lock failed: %s") % strerror(ret));
	++ncontention;
    }

    void unlock() {
	int ret = pthread_mutex_unlock(&m);
	INVARIANT(ret==0,
		  boost::format("pthread_mutex_unlock failed: %s")
		  % strerror(ret));
    }
    
    friend class PThreadCond;
    friend class PThreadScopedLock;
    friend class PThreadScopedUnlock;

    unsigned ncontention;
    pthread_mutex_t m;
};

/// \brief mutex class that can be manually locked and unlocked
class PThreadMutex : public PThreadScopedOnlyMutex {
public:
    PThreadMutex(bool errorcheck = LINTEL_PTHREAD_DEFAULT_ERRORCHECK)
	: PThreadScopedOnlyMutex(errorcheck) 
    { }
    ~PThreadMutex() { }

    /// returns true on successful lock
    bool trylock() {
	return PThreadScopedOnlyMutex::trylock();
    }

    /// attempts to lock mutex before abs_timeout (see clock_gettime);
    /// returns true if the lock was acquired.
    bool timedLock(const struct timespec &abs_timeout) {
	return PThreadScopedOnlyMutex::timedLock(abs_timeout);
    }

    void lock() {
	PThreadScopedOnlyMutex::lock();
    }

    void unlock() {
	PThreadScopedOnlyMutex::unlock();
    }

};

/// \brief Scoped locking class
///
/// Allocate this as an automatic in your stack frame.  It will
/// lock the mutex on construction and unlock it on destruction,
/// when the stack frame goes out of scope.
class PThreadScopedLock : boost::noncopyable {
public:
#ifndef LINTEL_PTHREAD_DISABLE_NONORDERED_SCOPED_LOCK
    explicit PThreadScopedLock(PThreadScopedOnlyMutex &_mutex) 
	: mutex(_mutex), ordering_group(NULL), old_level(0), mutex_level(0)
    {
	mutex.lock();
    }
#endif

    /// Define this lock as part of an ordered group; it is ok to take
    /// a lock at a higher level, but not one at a lower level.
    PThreadScopedLock(PThreadScopedOnlyMutex &_mutex, 
		      LockOrderingGroup &group, double _mutex_level) 
	: mutex(_mutex), ordering_group(NULL), mutex_level(_mutex_level)
    {
	old_level = group.scopeDown(mutex_level);
	mutex.lock();
	// Only set this up if we are sure we could scope down; otherwise
	// if the assertion is mapped to an exception in scopeDown, we 
	// blow up in the destructor.
	ordering_group = &group;
    }

    ~PThreadScopedLock()
    {
	mutex.unlock();
	if (ordering_group != NULL) {
	    // If the user mapped the assertion onto an exception, and
	    // they screwed up multiple things so we are exiting in a
	    // destructor and this call fails, then we will terminate
	    // non-gracefully.
	    ordering_group->scopeUp(mutex_level, old_level);
	}
    }

private:
    friend class PThreadScopedUnlock;
    PThreadScopedOnlyMutex &mutex;
    LockOrderingGroup *ordering_group;
    double old_level, mutex_level;
};

/// \brief Scoped unlocking class
///
/// Allocate this as an automatic in your stack frame, probabably
/// within a sub-block to temporarily release a scoped lock that you
/// had been holding.
class PThreadScopedUnlock : boost::noncopyable {
public:
    explicit PThreadScopedUnlock(PThreadScopedLock &_parent)
	: parent(_parent)
    { 
	if (parent.ordering_group != NULL) {
	    parent.ordering_group
		->scopeUp(parent.mutex_level, parent.old_level);
	}
	parent.mutex.unlock();
    }

    ~PThreadScopedUnlock() {
	if (parent.ordering_group != NULL) {
	    double tmp_old_level 
		= parent.ordering_group->scopeDown(parent.mutex_level);
	    SINVARIANT(tmp_old_level == parent.old_level);
	}
	parent.mutex.lock();
    }
private:
    PThreadScopedLock &parent;
};

/// \cond DEPRECATED
#ifndef LINTEL_PTHREAD_DISABLE_NONORDERED_SCOPED_LOCK
// TODO: work through deprecating this function
/// Old name for PThreadScopedLock; it was renamed to match with the
/// naming convention from the boost libraries.
class PThreadAutoLocker : public PThreadScopedLock {
public:
    explicit PThreadAutoLocker(PThreadMutex &_lock)
	: PThreadScopedLock(_lock) 
    { }
};
#endif
/// \endcond

// TODO: figure out how to make condition variables interact properly with lock ordering.
// TODO: Figure out how to test cond, mutex, etc in any semi-reliable way.
/// \brief Condition variable wrapping class
class PThreadCond : boost::noncopyable {
public:
    PThreadCond() {
	INVARIANT(pthread_cond_init(&c,NULL)==0,"fatal");
    }
    ~PThreadCond() {
	INVARIANT(pthread_cond_destroy(&c)==0,"fatal");
    }
    void signal() {
	INVARIANT(pthread_cond_signal(&c)==0,"fatal");
    }
    void broadcast() {
	INVARIANT(pthread_cond_broadcast(&c)==0,"fatal");
    }
    void wait(PThreadMutex &m) {
	int ret = pthread_cond_wait(&c,&m.m);
	INVARIANT(ret == 0,boost::format("fatal, ret=%d: %s") % ret % strerror(ret));
    }

    /// Wait to get the mutex @param m for at most @param seconds seconds.
    /// @param m mutex to try to lock
    /// @param seconds maximum time to spend waiting to acquire the lock
    /// @return true on timeout
    bool timedWait(PThreadMutex &m, double seconds) { 
        struct timespec abstime;

	CHECKED(clock_gettime(CLOCK_REALTIME, &abstime) == 0, "realtime clock get failed?!");
	SINVARIANT(seconds >= 0);

	abstime.tv_sec += static_cast<time_t>(floor(seconds));
	abstime.tv_nsec += static_cast<time_t>(round(1.0e9 * (seconds - floor(seconds))));

	if (abstime.tv_nsec >= 1000 * 1000 * 1000) {
	    abstime.tv_sec += 1;
	    abstime.tv_nsec -= 1000 * 1000 * 1000;
	    SINVARIANT(abstime.tv_nsec < 1000 * 1000 * 1000);
	}
        
        return timedWaitAbs(m, abstime);
    }
    
    bool timedWaitAbs(PThreadMutex &m, const struct timespec &abstime) {
        int ret = pthread_cond_timedwait(&c, &m.m, &abstime);
        using lintel::voidCast;
        INVARIANT(ret == 0 || ret == ETIMEDOUT, 
                  boost::format("error on timedWait(%p, %p, %d.%09d): %s ") % voidCast(&c)
                  % voidCast(&m.m) % abstime.tv_sec % abstime.tv_nsec % strerror(ret));
        return ret == ETIMEDOUT ? true : false;
    }
private:
    pthread_cond_t c;
};

#endif
