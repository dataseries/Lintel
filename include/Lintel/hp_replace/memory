#ifndef __STD_MEMORY 
#define __STD_MEMORY

// See below **** FIX TO NOT BLOAT MEMORY SIZE; by default 
// containers use up way too much memory.

#define __REPLACE_HP_STL_MEMORY
/***************************************************************************
 *
 * memory - declarations for the Standard Library memory implementation
 *
 * $Id: memory@#/main/1.84.1/1.84.1.2.1/sl1main/sl121main/8  02/21/97 12:04:20  smithey (SL121RA_UNIX)
 *
 ***************************************************************************
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 ***************************************************************************
 *
 * (c) Copyright 1994-1997 Rogue Wave Software, Inc.
 * ALL RIGHTS RESERVED
 *
 * The software and information contained herein are proprietary to, and
 * comprise valuable trade secrets of, Rogue Wave Software, Inc., which
 * intends to preserve as trade secrets such software and information.
 * This software is furnished pursuant to a written license agreement and
 * may be used, copied, transmitted, and stored only in accordance with
 * the terms of such license and with the inclusion of the above copyright
 * notice.  This software and information or any other copies thereof may
 * not be provided or otherwise made available to any other person.
 *
 * Notwithstanding any other lease or license that may pertain to, or
 * accompany the delivery of, this computer software and information, the
 * rights of the Government regarding its use, reproduction and disclosure
 * are as set forth in Section 52.227-19 of the FARS Computer
 * Software-Restricted Rights clause.
 * 
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions as set forth in subparagraph (c)(1)(ii) of the Rights in
 * Technical Data and Computer Software clause at DFARS 252.227-7013.
 * Contractor/Manufacturer is Rogue Wave Software, Inc.,
 * P.O. Box 2328, Corvallis, Oregon 97339.
 *
 * This computer software and information is distributed with "restricted
 * rights."  Use, duplication or disclosure is subject to restrictions as
 * set forth in NASA FAR SUP 18-52.227-79 (April 1985) "Commercial
 * Computer Software-Restricted Rights (April 1985)."  If the Clause at
 * 18-52.227-74 "Rights in Data General" is specified in the contract,
 * then the "Alternate III" clause applies.
 *
 **************************************************************************/ 

#include <stdcomp.h>

#ifndef RWSTD_NO_NEW_HEADER
#include <cstddef>
#include <cstdlib>
#include <cstdio>
#include <new>
#else
#include <new.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>

#endif //RWSTD_NO_NEW_HEADER

#ifndef RWSTD_HEADER_REQUIRES_HPP
#include <limits>
#include <iterator>
#include <utility>
#include <algorithm>
#else
#include <limits.hpp>
#include <iterator.hpp>
#include <utility.hpp>
#include <algorithm.hpp>
#endif

#ifdef RWSTD_MULTI_THREAD
#include <rw/stdmutex.h>
#endif

//
// Turn off the warnings under the MSVC compiler that
// say 'bool reserved for future use'
//
#ifdef RWSTD_MSVC_BOOL_WARNING
#pragma warning ( disable : 4237 )
#endif

#ifdef RWSTD_NO_NEW_DECL
extern void RWSTDExportFunc(*) operator new(size_t size, void* ptr);
#endif

#ifdef RWSTD_NO_NEW_HEADER
#ifndef RWSTD_HEADER_REQUIRES_HPP
#include <exception>
#else
#include <exception.hpp>
#endif
#endif

#ifndef RWSTD_NO_NAMESPACE
namespace __rwstd {
#endif

// Default buffer size for containers.
template <class T, class size>
inline size __rw_allocation_size(T*,size)
{
  return 1; // **** FIX TO NOT BLOAT MEMORY SIZE sizeof(T) >= 1024 ? 1 : 1024 / sizeof(T);
}
#ifndef RWSTD_NO_NAMESPACE
}
#endif

#ifndef RWSTD_NO_NAMESPACE
namespace __rogue_wave_std {
#endif

#if defined(RWSTD_NO_DESTROY_NONBUILTIN)
template <class T> struct __FS : public T
{
    __FS() { ; }
    //
    // Calls destructor, but does not free the space.
    //
    void operator delete (void*) {;} 
};
#endif


#ifdef __TURBOC__
#pragma warn -par
#endif

template <class T>
inline void __destroy (T* pointer)
{
#if defined(RWSTD_NO_DESTROY_NONBUILTIN)
    delete (__FS<T>*) (pointer);
#else
#if defined(RWSTD_EXPLICIT_SCOPE_DESTROY)
    pointer->T::~T();
#else
    pointer->~T();
#endif
#endif
}


template <class T1, class T2>
inline void __construct (T1* p, const T2& value)
{
    new (p) T1(value);
}


#if defined(RWSTD_NO_DESTROY_BUILTIN) || defined(RWSTD_NO_DESTROY_NONBUILTIN)
//
// Some specializations of STL destroy for builtin types.f
//
inline void __destroy (void*)             {;}
inline void __destroy (char*)             {;}
inline void __destroy (unsigned char*)    {;}
inline void __destroy (short*)            {;}
inline void __destroy (unsigned short*)   {;}
inline void __destroy (int*)              {;}
inline void __destroy (unsigned int*)     {;}
inline void __destroy (long*)             {;}
inline void __destroy (unsigned long*)    {;}
inline void __destroy (float*)            {;}
inline void __destroy (double*)           {;}
inline void __destroy (void**)            {;}
inline void __destroy (char**)            {;}
inline void __destroy (unsigned char**)   {;}
inline void __destroy (short**)           {;}
inline void __destroy (unsigned short**)  {;}
inline void __destroy (int**)             {;}
inline void __destroy (unsigned int**)    {;}
inline void __destroy (long**)            {;}
inline void __destroy (unsigned long**)   {;}
inline void __destroy (float**)           {;}
inline void __destroy (double**)          {;}
inline void __destroy (void***)           {;}
inline void __destroy (char***)           {;}
inline void __destroy (unsigned char***)  {;}
inline void __destroy (short***)          {;}
inline void __destroy (unsigned short***) {;}
inline void __destroy (int***)            {;}
inline void __destroy (unsigned int***)   {;}
inline void __destroy (long***)           {;}
inline void __destroy (unsigned long***)  {;}
inline void __destroy (float***)          {;}
inline void __destroy (double***)         {;}
#ifndef RWSTD_NO_BOOL
inline void __destroy (bool*)             {;}
inline void __destroy (bool**)            {;}
inline void __destroy (bool***)           {;}
#endif
#ifndef RWSTD_NO_LONGDOUBLE
inline void __destroy (long double*)      {;}
inline void __destroy (long double**)     {;}
inline void __destroy (long double***)    {;}
#endif 
#ifndef RWSTD_NO_OVERLOAD_WCHAR
inline void __destroy (wchar_t*)          {;}
inline void __destroy (wchar_t**)         {;}
inline void __destroy (wchar_t***)        {;}
#endif
#endif /*RWSTD_NO_DESTROY_BUILTIN || RWSTD_NO_DESTROY_NONBUILTIN*/


#ifndef RWSTD_NO_NAMESPACE
} // __rogue_wave_std namespace

namespace std {
#endif

extern const char RWSTDExportFunc(*) rwse_OutOfRange;

//
// Raw storage iterator.
//

template <class OutputIterator, class T>
class raw_storage_iterator : public output_iterator
{
  protected:
    OutputIterator iter;
  public:
    explicit raw_storage_iterator (OutputIterator x) : iter(x) {}
    raw_storage_iterator<OutputIterator, T>& operator* () { return *this; }
    raw_storage_iterator<OutputIterator, T>& operator= (const T& element)
    {
#ifndef RWSTD_NO_NAMESPACE
       using namespace __rogue_wave_std;
#endif
        __construct(iter, element); return *this;
    }
    raw_storage_iterator<OutputIterator, T>& operator++ ()
    {
        ++iter; return *this;
    }
    raw_storage_iterator<OutputIterator, T> operator++ (int)
    {
        raw_storage_iterator<OutputIterator, T> tmp = *this;
        ++iter;
        return tmp;
    }
};



//
// Memory handling primitives.
//

template <class ForwardIterator> 
RWSTD_TRICKY_INLINE void destroy (ForwardIterator first, ForwardIterator last)
{
    while (first != last)
    {
#ifndef RWSTD_NO_NAMESPACE
       using namespace __rogue_wave_std;
#endif
       __destroy(first);
       ++first;
    }
}

#ifdef RWSTD_FAST_TEMP_BUF

#if defined(RWSTD_SHARED_LIB) && !defined (RWSTD_MULTI_THREAD)
#error Cannot use fast temporary buffer in this configuration
#endif
#if defined(_RWSTDDLL) && defined (__WIN16__)
#error Cannot use fast temporary buffer in this configuration
#endif

#ifndef __stl_buffer_size
#define __stl_buffer_size 16384  /* 16k */
#endif

extern char RWSTDExport __stl_temp_buffer[__stl_buffer_size];

#ifdef RWSTD_MULTI_THREAD
extern RWSTDMutex RWSTDExport __stl_temp_buffer_mutex;
extern bool       RWSTDExport __stl_temp_buffer_being_used;
#endif

template <class T>
pair<T*, int> get_temporary_buffer (int len, T*)
{
    while (len > __stl_buffer_size / sizeof(T))
    {
      T* tmp = RWSTD_STATIC_CAST(T*,(   ::operator new(RWSTD_STATIC_CAST(unsigned int,len) * sizeof(T))));
      if (tmp)
        {
            pair<T*, ptrdiff_t> result(tmp, len);
            return result;
        }
        len = len / 2;
    }
    
#ifdef RWSTD_MULTI_THREAD
    RWSTDGuard guard(__stl_temp_buffer_mutex);

    if (__stl_temp_buffer_being_used)
    {
      T* tmp = RWSTD_STATIC_CAST(T*,(   ::operator new(RWSTD_STATIC_CAST(unsigned int,len) * sizeof(T))));
      pair<T*,int> result(tmp, len);
      return result;
    }
    else
    {
        __stl_temp_buffer_being_used = true;
        pair<T*, int> result((T*)__stl_temp_buffer, 
                             RWSTD_STATIC_CAST(int,(__stl_buffer_size / sizeof(T))));
        return result;
    }
#else
    pair<T*, int> result((T*)__stl_temp_buffer, 
			 RWSTD_STATIC_CAST(int,(__stl_buffer_size / sizeof(T))));
    return result;
#endif /*RWSTD_MULTI_THREAD*/
}

template <class T>
inline void return_temporary_buffer (T* p)
{
#ifdef RWSTD_MULTI_THREAD
  RWSTDGuard guard(__stl_temp_buffer_mutex);

  if ((char*)p != __stl_temp_buffer) 
      ::operator delete(p);
  else
      __stl_temp_buffer_being_used = false;
#else
  if ((char*)p != __stl_temp_buffer) 
     ::operator delete(p);
#endif /*RWSTD_MULTI_THREAD*/
}

#else

template <class T>
pair<T*, int> get_temporary_buffer (int len, T*)
{
  T* tmp = RWSTD_STATIC_CAST(T*,(   ::operator new(RWSTD_STATIC_CAST(unsigned int,len) * sizeof(T))));
    pair<T*,int> result(tmp, len);
    return result;
}

template <class T>
inline void return_temporary_buffer (T* p)
{
   ::operator delete(p);
}

#ifndef RWSTD_NO_ARG_MATCH
template <class T>
pair<T*, long> get_temporary_buffer (long len, T* p)
{
    if (len > INT_MAX/sizeof(T)) 
        len = INT_MAX/sizeof(T);
  pair<T*, int> tmp = get_temporary_buffer(RWSTD_STATIC_CAST(int,len), p);
  return pair<T*, long>(tmp.first, RWSTD_STATIC_CAST(long,tmp.second));
}
#endif /* RWSTD_NO_ARG_MATCH */

#endif /*RWSTD_FAST_TEMP_BUF*/


//
// The default allocator.
//


#ifdef RWSTD_ALLOCATOR
class RWSTDExport allocator
{
  public:
    typedef size_t    size_type;
    typedef ptrdiff_t difference_type;
    
    template <class T> struct types 
    {
      typedef T*         pointer;
      typedef const T*   const_pointer;
      typedef T&         reference;
      typedef const T&   const_reference;
      typedef T          value_type;
    };

    allocator() { ; }
    ~allocator(){ ; }

    template <class T> 
    T* address(const T& x) const 
    { 
      return RWSTD_STATIC_CAST(T*,&x); 
    }
    template<class T> 
    T* allocate(size_type n, T*)
    { 
      T* tmp =
         RWSTD_STATIC_CAST(T*,(::operator 
            new(RWSTD_STATIC_CAST(size_t,(n * sizeof(T))))));
      RWSTD_THROW_NO_MSG(tmp == 0, bad_alloc);
      return tmp;
    }

    template<class T> void deallocate(T* p) 
    { 
      ::operator delete(p);
    }

    size_type max_size() const
    { 
       return UINT_MAX;
    }

    template <class T>
    inline void construct(T* p, const T& val);

    template <class T>
    inline void destroy(T* p);

};

template <>
class allocator::types<void> {  // specialization
  public:
    typedef void* pointer;
    typedef const void* const_pointer;
    typedef void  value_type;
};

template <> 
void*  allocator::allocate(size_type n, void*)
{ 
  void* tmp =
     RWSTD_STATIC_CAST(void*,(::operator new(RWSTD_STATIC_CAST(size_t,n))));
  RWSTD_THROW_NO_MSG(tmp == 0, bad_alloc);
  return tmp;
}

template <class T>
inline void allocator::construct(T* p, const T& val)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
  __construct(p,val);
}

template <class T>
inline void allocator::destroy(T* p)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    __destroy(p);
}

#else

//
// Alternate allocator uses an interface class (allocator_interface)
// to get type safety.
//
class RWSTDExport allocator
{
  public:
   
    typedef size_t    size_type;
    typedef ptrdiff_t difference_type;

    allocator() { ; }
    ~allocator() { ; }

    void * allocate (size_type n, void *  = 0)
    { 
      void * tmp = ::operator new(n);
  RWSTD_THROW_NO_MSG(tmp == 0, bad_alloc);
  return tmp;
    }
    

    void deallocate (void* p) 
    { 
      ::operator delete(p);
    }
    size_type max_size (size_type size) const
    { 
      return 1 > UINT_MAX/size ? size_type(1) : size_type(UINT_MAX/size);
    }

};

//
// allocator_interface provides all types and typed functions.  Memory
// allocated as raw bytes using the class provided by the Allocator
// template parameter.  allocator_interface casts appropriately.
//
// Multiple allocator_interface objects can attach to a single 
// allocator, thus allowing one allocator to allocate all storage
// for a container, regardless of how many types are involved.
//
// The only real restriction is that pointer and reference are
// hard coded as T* and T&.  Partial specialization would 
// get around this.
//
template <class Allocator,class T>
class allocator_interface 
{
public:
  typedef Allocator allocator_type;
  typedef T*         pointer;
  typedef const T*   const_pointer;      
  typedef T&         reference;
  typedef const T&   const_reference;
  typedef T          value_type;
  typedef typename RWSTD_ALLOC_SIZE_TYPE             size_type;
  typedef typename RWSTD_ALLOC_DIFF_TYPE             difference_type;
protected:
  allocator_type*         alloc_;

public:
  allocator_interface() : alloc_(NULL) { ; }
  allocator_interface(Allocator* a) : alloc_(a) { ; }

  void alloc(Allocator* a)
  { 
    alloc_ = a; 
  }   

  pointer address (T& x) 
  { 
    return RWSTD_STATIC_CAST(pointer,&x); 
  }
  
  size_type max_size ()  const
  { 
    return alloc_->max_size(sizeof(T));
  }

  pointer allocate(size_type n, pointer = 0)
  {
    return RWSTD_STATIC_CAST(pointer,alloc_->allocate(n*sizeof(T)));
  }

  void deallocate(pointer p)
  {
    alloc_->deallocate(p);
  }

#ifndef RWSTD_BORLAND_SPECIAL_PROBLEM 
  inline void construct(pointer p, const T& val);

  inline void destroy(T* p);

#else
  void construct(pointer p, const T& val)
  {
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    __construct(p,val);
  }

  void allocator_interface<Allocator,T>::destroy(T* p)
  {
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    __destroy(p);
  }
#endif /* RWSTD_BORLAND_SPECIAL_PROBLEM  */

};


#ifndef RWSTD_BORLAND_SPECIAL_PROBLEM 
template <class Allocator, class T>
inline void 
allocator_interface<Allocator,T>::construct(pointer p, const T& val)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
  __construct(p,val);
}

template <class Allocator, class T>
inline void allocator_interface<Allocator,T>::destroy(T* p)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    __destroy(p);
}
#endif /* RWSTD_BORLAND_SPECIAL_PROBLEM  */

RWSTD_TEMPLATE
class allocator_interface<allocator,void> 
{
  public:
    typedef void*         pointer;
    typedef const void*   const_pointer;      
};

#endif  // RWSTD_ALLOCATOR

#ifndef RWSTD_NO_NAMESPACE
}
#endif

// 
// allocator globals
//
#ifndef RWSTD_NO_NAMESPACE
inline void * operator new(size_t N, std::allocator& a)
#else
inline void * operator new(size_t N, allocator& a)
#endif
{
  return a.allocate(N,(void*)0);
}


#ifndef RWSTD_NO_NEW_BRACKETS
#ifndef RWSTD_NO_NAMESPACE
inline void * operator new[](size_t N, std::allocator& a)
#else
inline void * operator new[](size_t N, allocator& a)
#endif
{
  return RWSTD_STATIC_CAST(void*,a.allocate(N));
}
#endif

#ifndef RWSTD_NO_NAMESPACE
namespace std {
#endif

inline bool operator==(const allocator&, const allocator&)
{
  return true;
}




//
// Specialized algorithms.
//

template <class InputIterator, class ForwardIterator>
RWSTD_TRICKY_INLINE ForwardIterator uninitialized_copy (InputIterator first, InputIterator last,
                                    ForwardIterator result)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    while (first != last) __construct(result++, *first++);
    return result;
}

template <class ForwardIterator, class T>
RWSTD_TRICKY_INLINE void uninitialized_fill (ForwardIterator first, ForwardIterator last,
                         const T& x)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    while (first != last) __construct(first++, x);
}

template <class ForwardIterator, class Size, class T>
RWSTD_TRICKY_INLINE void uninitialized_fill_n (ForwardIterator first, Size n, const T& x)
{
#ifndef RWSTD_NO_NAMESPACE
    using namespace __rogue_wave_std;
#endif
    while (n--) __construct(first++, x);
}


//
// Template auto_ptr holds onto a pointer obtained via new and deletes that
// object when it itself is destroyed (such as when leaving block scope).
//
// It can be used to make calls to new() exception safe.
//

template<class X> class auto_ptr
{
  public:
    //
    // construct/copy/destroy
    //
    explicit auto_ptr (X* p = 0) : the_p(p)           {}
  auto_ptr (const auto_ptr<X>& a)    : the_p((RWSTD_CONST_CAST(auto_ptr<X>&,a)).release()) {}
  void operator= (const auto_ptr<X>& rhs) 
  { reset((RWSTD_CONST_CAST(auto_ptr<X>&,rhs)).release()); }
  ~auto_ptr () { delete the_p; }
    //
    // members
    //
    X& operator*  ()        const { return *the_p;   }
    X* operator-> ()        const { return the_p;    }
    X* get        ()        const { return the_p;    }
    X* release    ()              { X* tmp = get(); the_p = 0; return tmp; }
    void reset    (X* p = 0)      { delete the_p; the_p = p; }

private:

#ifdef RWSTD_NO_MUTABLE    
    X* the_p;
#else
    mutable X* the_p;
#endif
};

#ifndef RWSTD_NO_NAMESPACE
}
#endif

#endif /*__STD_MEMORY*/
