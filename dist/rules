#!/usr/bin/make -f

# TODO: get the check-packages.sh script running via project-builder
# TODO: get the remote-building stuff working
# TODO: add the VMs to the remote-building stuff

# Steps for a release:
# ./dist/rules prep-release
# edit version.tmp if we aren't doing a same-day release
# ./dist/rules remote-hosts # runs pretty fast, checks on lots of variety hosts
# export http_proxy=http://localhost:3128/
# ./dist/rules packages # painful, takes forever, exciting chances for failure
#   rm /var/cache/mock/lintel*/yum_cache on yum checksum failures
#   rm /var/cache/*.tgz on apt checksum failures
#   probably restart the squid cache also
# ./dist/rules martenot-copy
# edit the files on cello to note the new release, and any major announcements
# run the copy from cello to tesla to make the release public
help:
	@echo "./dist/rules prep-release # make the version stamp file in $(MAKE_DIST)"
	@echo "./dist/rules snapshot-tar # make tar files out of checked out Lintel/DataSeries"
	@echo "./dist/rules signing-daemon # start the package signing daemon"
	@echo "./dist/rules packages # build binary packages using project-builder"
	@echo "./dist/rules vm-all # build from source on all virtual machines"
	@echo "./dist/rules remote-hosts # build from source on remote hosts"
	@echo "./dist/rules martenot-copy"
	@echo "./dist/rules clean"
	@echo "release date $(RELEASE_DATE)"

# TODO: move the remainder of the package building code out of the {debian,redhat}/rules files
# and into here.  That makes the distribution of work -- code for local rebuild in those files,
# code for global multi-os-version in here.

MAKE_DIST := $(HOME)/tmp/make-dist
PB_ROOT := $(shell grep '^pbdefdir' $(HOME)/.pbrc | awk '{print $$4}' | sed 's,\$$ENV{.*},$(HOME),')

# 6.0=squeeze EOL ?
# 7.0=wheezy release ? -- too unstable to make release packages, useful for interim testing
DEBIAN_VERSIONS := 6.0
PB_DEBIAN := $(foreach ver, $(DEBIAN_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-examples-debian-$(ver)-$(arch)))

# Ubuntu (EOL): LTS: 8.04=hardy (2013-04) 10.04=lucid (2015-04) 12.04=pangolin (2017-04)
#          normal   10.10=maverick(2012-04) 11.04=natty (2012-10) 11.10=oneiric (2013-04), 
UBUNTU_VERSIONS := 8.04 10.04 12.04 10.10 11.04 11.10
PB_UBUNTU := $(foreach ver, $(UBUNTU_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-examples-ubuntu-$(ver)-$(arch)))

# We are building against vault.centos.org for the older versions; note that they
# are no longer receiving updates from centos.  We build against older versions because
# if we don't then we can't install on older versions, e.g. centos 5.6 has boost 1.41, but
# centos 5.5 has 1.33
# See also: http://www.centos.org/modules/smartfaq/faq.php?faqid=34
# RHEL5 2007-03 (5.0) .. 2007-11 (5.1) .. 2008-05 (5.2) .. 2009-01 (5.3) .. 2009-09 (5.4) 
#    .. 2010-04 (5.5) .. 2011-01 (5.6) .. 2011-08 (5.7) .. 2012-03 (5.8) .. 2017-04 (EOL)
# RHEL6 2010-11 (6.0) .. 2011-05 (6.1) .. 2011-12 (6.2) .. 2020-12 (EOL)
CENTOS_VERSIONS := 5.2 5.3 5.4 5.5 5.6 5.7 5.8
PB_CENTOS := $(foreach ver, $(CENTOS_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-examples-centos-$(ver)-$(arch)))

# Support for 2 releases + 1 month
# Fedora 16 2011-11-08 .. ~2013-01
# Fedora 15 2011-05-24 .. ~2012-6
FEDORA_VERSIONS := 15 16
PB_FEDORA := $(foreach ver, $(FEDORA_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-examples-fedora-$(ver)-$(arch)))

# Support for two releases + 2 months; see http://en.opensuse.org/openSUSE:Roadmap + http://en.opensuse.org/Lifetime
# 12.2: 2012-07-11 .. ?
# 12.1: 2011-11-16 .. 2013-05-15
# 11.4: 2011-03-10 .. 2012-09-15
OPENSUSE_VERSIONS := 11.4 12.1
PB_OPENSUSE := $(foreach ver, $(OPENSUSE_VERSIONS), \
	         $(foreach arch, x86_64 i386, pb-examples-opensuse-$(ver)-$(arch)))

SCILINUX_VERSIONS := 6.0 6.1 6.2
PB_SCILINUX := $(foreach ver, $(SCILINUX_VERSIONS), \
	         $(foreach arch, x86_64 i386, pb-examples-scilinux-$(ver)-$(arch)))

FREEBSD_VERSIONS := 7r4 8r2 9r0
VM_FREEBSD := $(foreach ver, $(FREEBSD_VERSIONS), \
	         $(foreach arch, amd64 i386, vm-dataseries-freebsd-$(ver)-$(arch)))

OPENBSD_VERSIONS := 4r9 5r0
VM_OPENBSD := $(foreach ver, $(OPENBSD_VERSIONS), \
	         $(foreach arch, amd64 i386, vm-dataseries-openbsd-$(ver)-$(arch)))

PARALLELISM=6

RELEASE_DATE := $(shell if [ -f $(MAKE_DIST)/version ]; then . $(MAKE_DIST)/version; echo $$RELEASE_DATE; else echo unknown; fi)
RELEASE_VERSION := $(shell if [ -f $(MAKE_DIST)/version ]; then . $(MAKE_DIST)/version; echo $$RELEASE_VERSION; else echo unknown; fi)

###### -- local and remote host build vaiables --

TEST_HOSTS = $(shell awk '{print $$1}' < dist/remote-host-list)
BUILD := $(MAKE_DIST)/build

prep-release: $(MAKE_DIST)/version

$(MAKE_DIST)/version:
	mkdir -p $(MAKE_DIST)
	if [ -f $(MAKE_DIST)/version.tmp ]; then \
		echo "Using existing version.tmp"; \
	else \
		echo "RELEASE_DATE=`date +%Y-%m-%d`" >$(MAKE_DIST)/version.tmp; \
		echo "RELEASE_VERSION=0.`date +%Y.%m.%d`" >>$(MAKE_DIST)/version.tmp; \
	fi
	./dist/check-changelogs.sh $(PB_ROOT) $(MAKE_DIST)
	mv $(MAKE_DIST)/version.tmp $(MAKE_DIST)/version

snapshot-tar: $(MAKE_DIST)/version
	[ ! -f CMakeCache.txt ]
	[ ! -f ../DataSeries/CMakeCache.txt ]
	./dist/make-tar.sh $(MAKE_DIST)
	(cd ../DataSeries && ./dist/make-tar.sh $(MAKE_DIST))
	(cd ../DataSeriesExamples && ./make-tar.sh $(MAKE_DIST))

signing-daemon: 
	./dist/sign-repo.sh --restart-daemon

# sudo HOME=/var/www/localpkgs gpg --gen-key
# Real name: Local packages signing key
# Email address: na@example.com
# Comment: local package signing key
# empty passphrase (or use gpg-agent)

martenot-copy: $(BUILD)/remote-host/martenot.hpl.hp.com/result
	dist/martenot-copy --to-martenot XXXXX$(REMOTE_TMP) $(RELEASE_DATE)

clean:
	rm -rf $(MAKE_DIST)
	sudo rm -rf --one-file-system $(PB_ROOT)/chroot
	sudo rm -rf $(PB_ROOT)/repos
	-sudo rm ../*$(RELEASE_VERSION)* ../*$(RELEASE_VERSION)*
	-[ -d .git ] && rm Release.info ChangeLog ../DataSeries/Release.info ../DataSeries/ChangeLog

# ------------ Packages -------------

packages: pb-deb pb-rpm

pb-debian: $(PB_DEBIAN)

pb-ubuntu: $(PB_UBUNTU)

pb-deb: pb-debian pb-ubuntu

pb-centos: $(PB_CENTOS)

pb-fedora: $(PB_FEDORA)

pb-opensuse: $(PB_OPENSUSE)

pb-scilinux: $(PB_SCILINUX)

pb-rpm: pb-centos pb-fedora pb-opensuse pb-scilinux

# ------------------------------------------------------------------------
# Project-Builder rules

.SECONDARY:

pb-lintel-src: /home/anderse/projects/Lintel-$(RELEASE_VERSION).tar.gz
	@[ ! -f $(MAKE_DIST)/lintel/pb/cms2build ] || rm $(MAKE_DIST)/lintel/pb/cms2build
	./dist/rules $(MAKE_DIST)/lintel/pb/cms2build

pb-lintel-%: $(MAKE_DIST)/lintel/pb/%/build
	@echo "Built lintel package for $*"

pb-dataseries-src: 
	@[ ! -f $(MAKE_DIST)/dataseries/pb/cms2build ] || rm $(MAKE_DIST)/dataseries/pb/cms2build
	./dist/rules $(MAKE_DIST)/dataseries/pb/cms2build

pb-dataseries-%: $(MAKE_DIST)/dataseries/pb/%/build
	@echo "Built dataseries package for $*"
	@echo "------------------------------------------------------------------"

pb-examples-%: $(MAKE_DIST)/examples/pb/%/build
	@echo "Built example programs for $*"
	@echo "------------------------------------------------------------------"

# --- lintel ---

$(MAKE_DIST)/lintel/pb/cms2build: $(PB_ROOT)/Lintel/pbconf/$(RELEASE_VERSION)/Lintel.pb /var/www/pb-sources/Lintel-$(RELEASE_VERSION).tar.gz
	mkdir -p `dirname $@` $(PB_ROOT)/repos
	pb -v -p Lintel -r $(RELEASE_VERSION) cms2build >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/new-ve: $(MAKE_DIST)/lintel/pb/cms2build
	@[ ! -f $@ ] || rm $@
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/proc
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/sys
	-sudo rm -rf --one-file-system $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`
	@[ ! -d $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'` ]
	@mkdir -p `dirname $@`
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -m $* newve >$@-new 2>$@.err
	[ `grep 'was corrupt' $@-new | wc -l` = 0 ]
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/setup-ve: $(MAKE_DIST)/lintel/pb/%/new-ve
	@[ ! -f $@ ] || rm $@
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -m $* setupve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/build: $(MAKE_DIST)/lintel/pb/%/setup-ve
	@[ ! -f $@ ] || rm $@
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -p Lintel -m $* build2ve >$@-new 2>$@.err
	dist/sign-repo.sh $* >>$@-new 2>&1
	mv $@-new $@

# --- dataseries ---

$(MAKE_DIST)/dataseries/pb/cms2build: $(PB_ROOT)/DataSeries/pbconf/$(RELEASE_VERSION)/DataSeries.pb /var/www/pb-sources/DataSeries-$(RELEASE_VERSION).tar.gz
	mkdir -p `dirname $@`
	pb -v -p DataSeries -r $(RELEASE_VERSION) cms2build >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/new-ve: $(MAKE_DIST)/lintel/pb/%/build $(MAKE_DIST)/dataseries/pb/cms2build
	@[ ! -f $@ ] || rm $@
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/proc
	-sudo rm -rf --one-file-system $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`
	@[ ! -d $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'` ]
	@mkdir -p `dirname $@`
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -m $* newve >$@-new 2>$@.err
	[ `grep 'was corrupt' $@-new | wc -l` = 0 ]
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/setup-ve: $(MAKE_DIST)/dataseries/pb/%/new-ve
	@[ ! -f $@ ] || rm $@
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -m $* setupve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/build: $(MAKE_DIST)/dataseries/pb/%/setup-ve
	@[ ! -f $@ ] || rm $@
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -p DataSeries -m $* build2ve >$@-new 2>$@.err
	dist/sign-repo.sh $* >>$@-new 2>&1
	mv $@-new $@

# --- dataseries examples ---

$(MAKE_DIST)/examples/pb/%/new-ve: $(MAKE_DIST)/dataseries/pb/%/build
	@[ ! -f $@ ] || rm $@
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/proc
	-sudo rm -rf --one-file-system $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`
	@[ ! -d $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'` ]
	@mkdir -p `dirname $@`
	[ ! -f $@-new ] || dist/try-fixup-download-errors.sh $* $@-new
	pb -v -m $* newve >$@-new 2>$@.err
	[ `grep 'was corrupt' $@-new | wc -l` = 0 ]
	mv $@-new $@

$(MAKE_DIST)/examples/pb/%/build: $(MAKE_DIST)/examples/pb/%/new-ve
	./dist/test-example-chroot.sh $(PB_ROOT) $* $(RELEASE_VERSION) >$@-new 2>$@.err
	[ `grep 'SUCCESS BUILDING EXAMPLES' $@-new | wc -l` = 1 ]
	mv $@-new $@

# ------------------------------------------------------------------------
# Testing on virtual machines

vm-dataseries-%: $(MAKE_DIST)/vm/%/result
	@echo "--------- Success building dataseries on $* ---------"

vm-freebsd: $(VM_FREEBSD)

vm-openbsd: $(VM_OPENBSD)

vm-all: vm-openbsd vm-freebsd 

vm-check-%: 
	ping -c 1 $*
	HOSTNAME=`ssh $* hostname | sed 's/.my.domain//'` && echo "remotename=$$HOSTNAME" && [ $* = "$$HOSTNAME" ]
	echo "------ $* running properly ------"

vm-check-all: $(patsubst vm-dataseries-%, vm-check-%, $(VM_FREEBSD) $(VM_OPENBSD))
	@echo "************ all VM's running properly **************"

/var/www/pb-sources/deptool-bootstrap: $(BUILD_OPT)/Lintel/src/deptool-bootstrap
	cp $< $@

/var/www/pb-sources/%.bz2: /var/www/pb-sources/%.gz
	gunzip -c < $< | bzip2 -9v >$@-new
	mv $@-new $@

LR_DEPS := /var/www/pb-sources/Lintel-$(RELEASE_VERSION).tar.bz2     \
	   /var/www/pb-sources/DataSeries-$(RELEASE_VERSION).tar.bz2 \
	   /var/www/pb-sources/deptool-bootstrap

/var/www/pb-sources/latest-release: $(LR_DEPS)
	echo "Lintel-$(RELEASE_VERSION).tar.bz2" >$@-new
	echo "DataSeries-$(RELEASE_VERSION).tar.bz2" >>$@-new
	mv $@-new $@

BUILD_FROM_SOURCE := $(PROJECTS)/Lintel/dist/build-from-source.sh
$(MAKE_DIST)/vm/%/build: /var/www/pb-sources/latest-release $(BUILD_FROM_SOURCE)
	mkdir -p `dirname $@`
	./dist/rules vm-check-$* >$@-new 2>&1
	scp dist/build-from-source.sh $*:/var/tmp >>$@-new 2>&1
	ssh $* /bin/sh /var/tmp/build-from-source.sh $(RELEASE_VERSION) $* http://192.168.122.1/pb-sources `sha1sum $(WWW_SRC)/Lintel-$(RELEASE_VERSION).tar.bz2 | awk '{print $$1}'` `sha1sum $(WWW_SRC)/DataSeries-$(RELEASE_VERSION).tar.bz2 | awk '{print $$1}'` `sha1sum $(WWW_SRC)/DataSeriesExamples-$(RELEASE_VERSION).tar.gz | awk '{print $$1}'` \
	    >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/vm/%/result: $(MAKE_DIST)/vm/%/build
	scp $*:/var/tmp/dataseries-test/result-$* $@-new
	[ "`cat $@-new`" = $(RELEASE_VERSION) ]
	ssh $* rm -rf /var/tmp/dataseries-test
	mv $@-new $@

# ------------------------------------------------------------------------
# Testing on existing systems...

remote-hosts: 
	./dist/rules -j 1 $(foreach host, $(TEST_HOSTS), prep-host-$(host))
	# lots of parallelism for remote host build, it's all different machines
	./dist/rules -j -k $(foreach host, $(TEST_HOSTS), host-dataseries-$(host))

prep-host-%:
	ssh $* hostname

host-dataseries-%: $(MAKE_DIST)/remote-hosts/%/result
	@echo "---------- Success building dataseries on $* -----------"

WWW_SRC := /var/www/pb-sources
$(MAKE_DIST)/remote-hosts/tesla-source: $(WWW_SRC)/latest-release
	mkdir -p `dirname $@`
	rsync -av $(WWW_SRC)/latest-release $(WWW_SRC)/Lintel-$(RELEASE_VERSION).tar.bz2 \
	    $(WWW_SRC)/deptool-bootstrap $(WWW_SRC)/DataSeries-$(RELEASE_VERSION).tar.bz2 \
	    $(WWW_SRC)/DataSeriesExamples-*.tar.gz \
	    tesla.hpl.hp.com:opensource/tmp >$@-new
	mv $@-new $@

REMHOST_BUILD_DEPS := $(MAKE_DIST)/remote-hosts/tesla-source $(BUILD_FROM_SOURCE) 
$(MAKE_DIST)/remote-hosts/%/build: $(REMHOST_BUILD_DEPS)
	mkdir -p `dirname $@`
	scp dist/build-from-source.sh $*:/var/tmp >$@-new 2>&1
	ssh $* /bin/sh /var/tmp/build-from-source.sh $(RELEASE_VERSION) $* http://tesla.hpl.hp.com/opensource/tmp `sha1sum $(WWW_SRC)/Lintel-$(RELEASE_VERSION).tar.bz2 | awk '{print $$1}'` `sha1sum $(WWW_SRC)/DataSeries-$(RELEASE_VERSION).tar.bz2 | awk '{print $$1}'` `sha1sum $(WWW_SRC)/DataSeriesExamples-$(RELEASE_VERSION).tar.gz | awk '{print $$1}'` >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/remote-hosts/%/result: $(MAKE_DIST)/remote-hosts/%/build
	scp $*:/var/tmp/dataseries-test/result-$* $@-new
	[ "`cat $@-new`" = $(RELEASE_VERSION) ]
	ssh $* rm -rf /var/tmp/dataseries-test
	mv $@-new $@
