#!/usr/bin/make -f

# TODO: get the check-packages.sh script running via project-builder
# TODO: get the remote-building stuff working
# TODO: add the VMs to the remote-building stuff

# Steps for a release:
# ./dist/rules prep-release
# edit version.tmp if we aren't doing a same-day release
# ./dist/rules remote-hosts # runs pretty fast, checks on lots of variety hosts
# export http_proxy=http://localhost:3128/
# ./dist/rules packages # painful, takes forever, exciting chances for failure
#   rm /var/cache/mock/lintel*/yum_cache on yum checksum failures
#   rm /var/cache/*.tgz on apt checksum failures
#   probably restart the squid cache also
# ./dist/rules martenot-copy
# edit the files on cello to note the new release, and any major announcements
# run the copy from cello to tesla to make the release public
help:
	@echo "./dist/rules prep-release # make the version stamp file in $(MAKE_DIST)"
	@echo "./dist/rules snapshot-tar # make tar files out of checked out Lintel/DataSeries"
	@echo "./dist/rules sources"
	@echo "./dist/rules packages"
	@echo "./dist/rules remote-hosts"
	@echo "./dist/rules martenot-copy"
	@echo "./dist/rules clean"
	@echo "release date $(RELEASE_DATE)"

# TODO: move the remainder of the package building code out of the {debian,redhat}/rules files
# and into here.  That makes the distribution of work -- code for local rebuild in those files,
# code for global multi-os-version in here.

MAKE_DIST := $(HOME)/tmp/make-dist
PB_ROOT := $(shell grep '^pbdefdir' $(HOME)/.pbrc | awk '{print $$4}')
SRC_LINTEL := $(HOME)/projects/Lintel
SRC_DATASERIES := $(HOME)/projects/DataSeries

# 6.0=squeeze EOL ?
# 7.0=wheezy release ?
DEBIAN_VERSIONS := 6.0 7.0
PB_DEBIAN := $(foreach ver, $(DEBIAN_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-dataseries-debian-$(ver)-$(arch)))

# Ubuntu (EOL): LTS: 8.04=hardy (2013-04) 10.04=lucid (2015-04) 12.04=pangolin (2017-04)
#          normal   10.10=maverick(2012-04) 11.04=natty (2012-10) 11.10=oneiric (2013-04), 
UBUNTU_VERSIONS := 8.04 10.04 12.04 10.10 11.04 11.10
PB_UBUNTU := $(foreach ver, $(UBUNTU_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-dataseries-ubuntu-$(ver)-$(arch)))

# We are building against vault.centos.org for the older versions; note that they
# are no longer receiving updates from centos.  We build against older versions because
# if we don't then we can't install on older versions, e.g. centos 5.6 has boost 1.41, but
# centos 5.5 has 1.33
# See also: http://www.centos.org/modules/smartfaq/faq.php?faqid=34
# RHEL5 2007-03 (5.0) .. 2007-11 (5.1) .. 2008-05 (5.2) .. 2009-01 (5.3) .. 2009-09 (5.4) 
#    .. 2010-04 (5.5) .. 2011-01 (5.6) .. 2011-08 (5.7) .. 2012-03 (5.8) .. 2017-04 (EOL)
# RHEL6 2010-11 (6.0) .. 2011-05 (6.1) .. 2011-12 (6.2) .. 2020-12 (EOL)
CENTOS_VERSIONS := 5.2 5.3 5.4 5.5 5.6 5.7 5.8
PB_CENTOS := $(foreach ver, $(CENTOS_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-dataseries-centos-$(ver)-$(arch)))

# Support for 2 releases + 1 month
# Fedora 16 2011-11-08 .. ~2013-01
# Fedora 15 2011-05-24 .. ~2012-6
FEDORA_VERSIONS := 15 16
PB_FEDORA := $(foreach ver, $(FEDORA_VERSIONS), \
	       $(foreach arch, x86_64 i386, pb-dataseries-fedora-$(ver)-$(arch)))

# Support for two releases + 2 months; see http://en.opensuse.org/openSUSE:Roadmap + http://en.opensuse.org/Lifetime
# 12.2: 2012-07-11 .. ?
# 12.1: 2011-11-16 .. 2013-05-15
# 11.4: 2011-03-10 .. 2012-09-15
OPENSUSE_VERSIONS := 11.4 12.1
PB_OPENSUSE := $(foreach ver, $(OPENSUSE_VERSIONS), \
	         $(foreach arch, x86_64 i386, pb-dataseries-opensuse-$(ver)-$(arch)))

SCILINUX_VERSIONS := 6.0 6.1 6.2
PB_SCILINUX := $(foreach ver, $(SCILINUX_VERSIONS), \
	         $(foreach arch, x86_64 i386, pb-dataseries-scilinux-$(ver)-$(arch)))

PARALLELISM=6

LINTEL_VERSION := $(shell perl -ne '/\w+\s+\(([0-9\.]+)\) /o || die "bad $$_"; print "$$1"; exit(0);' <$(SRC_LINTEL)/debian/changelog)
DATASERIES_VERSION := $(shell perl -ne '/\w+\s+\(([0-9\.]+)\) /o || die "bad $$_"; print "$$1"; exit(0);' <$(SRC_DATASERIES)/debian/changelog)

RELEASE_DATE := $(shell if [ -f $(MAKE_DIST)/version ]; then . $(MAKE_DIST)/version; echo $$RELEASE_DATE; else echo unknown; fi)
REMOTE_TMP := /var/tmp

###### -- local and remote host build vaiables --

TEST_HOSTS = $(shell awk '{print $$1}' < dist/remote-host-list)
BUILD := $(MAKE_DIST)/build

prep-release: $(MAKE_DIST)/version

$(MAKE_DIST)/version:
	mkdir -p $(MAKE_DIST)
	if [ -f $(MAKE_DIST)/version.tmp ]; then \
		echo "Using existing version.tmp"; \
	else \
		echo "RELEASE_DATE=`date +%Y-%m-%d`" >$(MAKE_DIST)/version.tmp; \
		echo "RELEASE_VERSION=0.`date +%Y.%m.%d`" >>$(MAKE_DIST)/version.tmp; \
	fi
	echo "TODO-release: check changelogs against the project-builder variants"
	exit 1
	. $(MAKE_DIST)/version.tmp \
	    && [ `head -1 debian/changelog | grep $$RELEASE_VERSION | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp \
	    && [ `grep $$RELEASE_VERSION redhat/Lintel.spec.in | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp \
	    && [ `head -1 ../DataSeries/debian/changelog | grep $$RELEASE_VERSION | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp; DSSPEC=../DataSeries/redhat/DataSeries.spec.in \
	    && [ `grep $$RELEASE_VERSION $$DSSPEC | wc -l` = 1 ]
	mv $(MAKE_DIST)/version.tmp $(MAKE_DIST)/version

snapshot-tar: $(MAKE_DIST)/version
	[ ! -f CMakeCache.txt ]
	[ ! -f ../DataSeries/CMakeCache.txt ]
	./redhat/make-tar.sh
	(cd ../DataSeries && ./redhat/make-tar.sh)

# sudo HOME=/var/www/localpkgs gpg --gen-key
# Real name: Local packages signing key
# Email address: na@example.com
# Comment: local package signing key
# empty passphrase (or use gpg-agent)

martenot-copy: $(BUILD)/remote-host/martenot.hpl.hp.com/result
	dist/martenot-copy --to-martenot $(REMOTE_TMP) $(RELEASE_DATE)

clean:
	sudo rm -rf $(MAKE_DIST)
	sudo rm -rf --one-file-system $(PB_ROOT)/chroot
	sudo rm -rf $(PB_ROOT)/repos
	-sudo rm ../*$(LINTEL_VERSION)* ../*$(DATASERIES_VERSION)*
	-[ -d .git ] && rm Release.info ChangeLog ../DataSeries/Release.info ../DataSeries/ChangeLog

# ------------ Packages -------------

packages: $(PB_DEBIAN) $(PB_UBUNTU) $(PB_CENTOS) $(PB_FEDORA) $(PB_OPENSUSE) $(PB_SCILINUX)

# ------------------------------------------------------------------------
# Project-Builder rules

pb-lintel-src: /home/anderse/projects/Lintel-$(LINTEL_VERSION).tar.gz
	[ ! -f $(MAKE_DIST)/lintel/pb/cms2build ] || rm $(MAKE_DIST)/lintel/pb/cms2build
	./dist/rules $(MAKE_DIST)/lintel/pb/cms2build

pb-lintel-%: $(MAKE_DIST)/lintel/pb/%/build
	@echo "Built lintel package for $*"

pb-dataseries-src: 
	[ ! -f $(MAKE_DIST)/dataseries/pb/cms2build ] || rm $(MAKE_DIST)/dataseries/pb/cms2build
	./dist/rules $(MAKE_DIST)/dataseries/pb/cms2build

pb-dataseries-%: $(MAKE_DIST)/dataseries/pb/%/build
	@echo "Built dataseries package for $*"


$(MAKE_DIST)/lintel/pb/cms2build: $(PB_ROOT)/Lintel/pbconf/release/Lintel.pb /home/anderse/projects/Lintel-$(LINTEL_VERSION).tar.gz
	mkdir -p `dirname $@`
	pb -v -p Lintel -r 0.2012.02.28 cms2build >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/new-ve: $(MAKE_DIST)/lintel/pb/cms2build
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/proc
	-sudo rm -rf --one-file-system $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`
	[ ! -d $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'` ]
	mkdir -p `dirname $@`
	pb -v -m $* newve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/setup-ve: $(MAKE_DIST)/lintel/pb/%/new-ve
	pb -v -m $* setupve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/lintel/pb/%/build: $(MAKE_DIST)/lintel/pb/%/setup-ve
	pb -v -p Lintel -m $* build2ve >$@-new 2>$@.err
	mv $@-new $@



$(MAKE_DIST)/dataseries/pb/cms2build: $(PB_ROOT)/DataSeries/pbconf/release/DataSeries.pb /home/anderse/projects/DataSeries-$(LINTEL_VERSION).tar.gz
	mkdir -p `dirname $@`
	pb -v -p DataSeries -r 0.2012.02.28 cms2build >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/new-ve: $(MAKE_DIST)/lintel/pb/%/build $(MAKE_DIST)/dataseries/pb/cms2build
	-sudo umount $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`/proc
	-sudo rm -rf --one-file-system $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'`
	[ ! -d $(PB_ROOT)/chroot/`echo $* | sed 's,-,/,g'` ]
	mkdir -p `dirname $@`
	pb -v -m $* newve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/setup-ve: $(MAKE_DIST)/dataseries/pb/%/new-ve
	pb -v -m $* setupve >$@-new 2>$@.err
	mv $@-new $@

$(MAKE_DIST)/dataseries/pb/%/build: $(MAKE_DIST)/dataseries/pb/%/setup-ve
	pb -v -p DataSeries -m $* build2ve >$@-new 2>$@.err
	mv $@-new $@

# ------------------------------------------------------------------------
# Testing on existing systems...

remote-hosts: 
	./dist/rules $(BUILD)/localhost/done
	# lots of parallelism for remote host build, it's all different machines
	./dist/rules -j 16 $(foreach host, $(TEST_HOSTS), $(BUILD)/remote-host/$(host)/result)

$(BUILD)/tmp.db:
	[ `id -u` != 0 ]
	sudo mkdir -p `dirname $@`
	sudo chown `whoami` `dirname $@`
	cp $(HOME)/.monotone/ssd.db $@-new
	# mtn -d $@-new db init
	# mtn -d $@-new pull $(MTN_PULL_FROM) ssd.hpl.hp.com/Lintel
	# mtn -d $@-new pull $(MTN_PULL_FROM) ssd.hpl.hp.com/DataSeries
# TODO: if we do a pull, do the check here also
#    HEAD="`mtn -d tmp.db automate heads ssd.hpl.hp.com/$i`"
#    REF_HEAD="`cd ~/projects/$i; mtn automate heads`"
#    if [ "$HEAD" != "$REF_HEAD" ]; then 
#	echo "Weird, heads differ between synced ($HEAD) and ~/projects/$i ($REF_HEAD)"
#	exit 1
#    fi

	mv $@-new $@

$(BUILD)/localhost/%/ChangeLog: $(BUILD)/tmp.db
	[ $(RELEASE_DATE) != unknown ]
	mkdir -p `dirname $@`
	(cd $(BUILD) && $(SRC_LINTEL)/dist/checkout.sh $*) >$(BUILD)/localhost/checkout.$* 2>&1

$(BUILD)/localhost/%.tar.bz2: $(BUILD)/localhost/%/ChangeLog
	(cd $(BUILD) && tar cvvfj $@-new --exclude=_MTN $*)
	mv $@-new $@

$(BUILD)/localhost/deptool-bootstrap-local: $(BUILD_OPT)/Lintel/src/deptool-bootstrap
	cp $< $@-new
	chmod +x $@-new
	mv $@-new $@

$(BUILD)/localhost/sources: $(BUILD)/localhost/Lintel-$(RELEASE_DATE).tar.bz2 \
    $(BUILD)/localhost/DataSeries-$(RELEASE_DATE).tar.bz2 $(BUILD)/localhost/deptool-bootstrap-local
	touch $@

$(BUILD)/localhost/done: $(BUILD)/localhost/sources
	mkdir -p `dirname $@`
	$(SRC_LINTEL)/dist/test-local.sh $(BUILD)/localhost $(RELEASE_DATE) >$@-new 2>&1
	mv $@-new $@

LR_DEPS := $(BUILD)/localhost/Lintel-$(RELEASE_DATE).tar.bz2 \
	$(BUILD)/localhost/DataSeries-$(RELEASE_DATE).tar.bz2
$(BUILD)/latest-release: $(LR_DEPS)
	echo "Lintel-$(RELEASE_DATE).tar.bz2" >$@-new
	echo "DataSeries-$(RELEASE_DATE).tar.bz2" >>$@-new
	mv $@-new $@

$(BUILD)/tesla: $(BUILD)/localhost/done $(BUILD)/latest-release
	rsync -av --progress $(LR_DEPS) $(BUILD)/localhost/build/Lintel/src/deptool-bootstrap \
	    $(BUILD)/latest-release tesla.hpl.hp.com:opensource/tmp  >$@-new 2>&1
	mv $@-new $@

$(BUILD)/remote-host/%/build: $(SRC_LINTEL)/dist/test-remote.sh $(BUILD)/tesla
	mkdir -p `dirname $@`
	scp $(SRC_LINTEL)/dist/test-remote.sh $*:$(REMOTE_TMP)/test-remote.sh >$@-new 2>&1
	ssh $* /bin/sh $(REMOTE_TMP)/test-remote.sh $(RELEASE_DATE) $*  >>$@-new 2>&1
	mv $@-new $@

$(BUILD)/remote-host/%/result: $(BUILD)/remote-host/%/build
	scp $*:$(REMOTE_TMP)/test-remote/result-$* $@-new
	[ "`cat $@-new`" = $(RELEASE_DATE) ]
	mv $@-new $@
