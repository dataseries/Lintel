#!/usr/bin/make -f

# Consider migrating to project builder http://www.project-builder.org/

# TODO: move the remainder of the package building code out of the {debian,redhat}/rules files
# and into here.  That makes the distribution of work -- code for local rebuild in those files,
# code for global multi-os-version in here.

MAKE_DIST := $(HOME)/tmp/make-dist
SRC_LINTEL := $(HOME)/projects/Lintel
SRC_DATASERIES := $(HOME)/projects/DataSeries

# lenny EOL 2012-02-06
DEBIAN_VERSIONS := lenny squeeze wheezy
PBUILDER_DEBIAN := $(foreach dist, $(DEBIAN_VERSIONS), \
	               $(foreach arch, amd64 i386, $(MAKE_DIST)/pbuilder/debian-$(dist)-$(arch)))

# Ubuntu releases(EOL): dapper(2011-06) hardy (2013-04) karmic (2011-04) lucid (2015-04) 
#                       maverick(2012-04) natty (2012-10) oneiric (2011-10 .. 2013-04)
# Not going to support dapper, it's about to expire and it has a Release format old enough
# that lenny debootstrap doesn't recognize it.
UBUNTU_VERSIONS := hardy karmic lucid maverick natty
PBUILDER_UBUNTU := $(foreach dist, $(UBUNTU_VERSIONS), \
		       $(foreach arch, amd64 i386, $(MAKE_DIST)/pbuilder/ubuntu-$(dist)-$(arch)))

# We are building against vault.centos.org for the older versions; note that they
# are no longer receiving updates from centos.  We build against older versions because
# if we don't then we can't install on older versions, e.g. centos 5.6 has boost 1.41, but
# centos 5.5 has 1.33
# See also: http://www.centos.org/modules/smartfaq/faq.php?faqid=34
# RHEL5 2007-03-15 (5.0) .. 2007-11-07 (5.1) .. 2008-05-21 (5.2) .. 2009-01-20 (5.3)
#       .. 2009-09-02 (5.4) .. 2010-03-30 (5.5) .. 2011-01-12 (5.6) .. 2014-03-31 (EOL)
CENTOS_VERSIONS := 5 5.3 5.4 5.5 5.6

MOCK_CENTOS := $(foreach version, $(CENTOS_VERSIONS), $(foreach arch, x86_64 i386, \
		    $(MAKE_DIST)/mock/centos-$(version)-$(arch)))

# Support for 2 releases + 1 month
# Fedora 15 2011-05-24 .. 
# Fedora 14 2010-11-02 .. 
# Fedora 13 2010-05-25 .. 2011-06-24
FEDORA_VERSIONS := 13 14 15

MOCK_FEDORA := $(foreach version, $(FEDORA_VERSIONS), $(foreach arch, x86_64 i386, \
		    $(MAKE_DIST)/mock/fedora-$(version)-$(arch)))

# Support for two releases + 2 months; see http://en.wikipedia.org/wiki/OpenSUSE
# 11.4: 2011-03-10 ..
# 11.3: 2010-07-15 ..
# 11.2: 2009-09-12 .. 2011-05-10
OPENSUSE_VERSIONS := 11.2 11.3 11.4
CHROOT_OPENSUSE := $(foreach version, $(OPENSUSE_VERSIONS), $(foreach arch, x86_64 i586, \
			$(MAKE_DIST)/chroot/opensuse-$(version)-$(arch)))

SCILINUX_VERSIONS := 6 6.0 
MOCK_SCILINUX := $(foreach version, $(SCILINUX_VERSIONS), $(foreach arch, x86_64 i386, \
		      $(MAKE_DIST)/mock/scilinux-$(version)-$(arch)))

PARALLELISM=6
DEBIAN_MIRROR=http://mirrors1.kernel.org/debian/
UBUNTU_MIRROR=http://mirrors1.kernel.org/ubuntu/

LINTEL_VERSION := $(shell perl -ne '/\w+\s+\(([0-9\.]+)\) /o || die "bad $$_"; print "$$1"; exit(0);' <$(SRC_LINTEL)/debian/changelog)
DATASERIES_VERSION := $(shell perl -ne '/\w+\s+\(([0-9\.]+)\) /o || die "bad $$_"; print "$$1"; exit(0);' <$(SRC_DATASERIES)/debian/changelog)

RELEASE_DATE := $(shell if [ -f $(MAKE_DIST)/version ]; then . $(MAKE_DIST)/version; echo $$RELEASE_DATE; else echo unknown; fi)
REMOTE_TMP := /var/tmp

# -- local and remote host build vaiables --

TEST_HOSTS = $(shell awk '{print $$1}' < dist/remote-host-list)
BUILD := $(MAKE_DIST)/build

# Steps for a release:
# ./dist/rules prep-release
# edit version.tmp if we aren't doing a same-day release
# ./dist/rules remote-hosts # runs pretty fast, checks on lots of variety hosts
# export http_proxy=http://localhost:3128/
# ./dist/rules packages # painful, takes forever, exciting chances for failure
#   rm /var/cache/mock/lintel*/yum_cache on yum checksum failures
#   rm /var/cache/*.tgz on apt checksum failures
#   probably restart the squid cache also
# ./dist/rules martenot-copy
# edit the files on cello to note the new release, and any major announcements
# run the copy from cello to tesla to make the release public
help:
	@echo "./dist/rules packages"
	@echo "./dist/rules remote-hosts"
	@echo "./dist/rules endpin-mtn"
	@echo "./dist/rules martenot-copy"
	@echo "./dist/rules clean"
	@echo "release date $(RELEASE_DATE)"

prep-release:
	echo "Figure out how to make the perl stuff not include my path in the release"
	exit 1
	mkdir -p $(MAKE_DIST)
	[ ! -f $(MAKE_DIST)/version ]
	if [ -f $(MAKE_DIST)/version.tmp ]; then \
		echo "Using existing version.tmp"; \
	else \
		echo "RELEASE_DATE=`date +%Y-%m-%d`" >$(MAKE_DIST)/version.tmp; \
		echo "RELEASE_VERSION=0.`date +%Y.%m.%d`" >>$(MAKE_DIST)/version.tmp; \
	fi
	. $(MAKE_DIST)/version.tmp \
	    && [ `head -1 debian/changelog | grep $$RELEASE_VERSION | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp \
	    && [ `grep $$RELEASE_VERSION redhat/Lintel.spec.in | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp \
	    && [ `head -1 ../DataSeries/debian/changelog | grep $$RELEASE_VERSION | wc -l` = 1 ]
	. $(MAKE_DIST)/version.tmp; DSSPEC=../DataSeries/redhat/DataSeries.spec.in \
	    && [ `grep $$RELEASE_VERSION $$DSSPEC | wc -l` = 1 ]
	mv $(MAKE_DIST)/version.tmp $(MAKE_DIST)/version

endpin-mtn:
	cd ~/projects/Lintel && mtn sync endpin.cs.hmc.edu ssd.hpl.hp.com/Lintel\*
	cd ~/projects/DataSeries && mtn sync endpin.cs.hmc.edu ssd.hpl.hp.com/DataSeries\*

# sudo HOME=/var/www/localpkgs gpg --gen-key
# Real name: Local packages signing key
# Email address: na@example.com
# Comment: local package signing key
# empty passphrase (or use gpg-agent)

martenot-copy: $(BUILD)/remote-host/martenot.hpl.hp.com/result
	dist/martenot-copy --to-martenot $(REMOTE_TMP) $(RELEASE_DATE)

clean:
	sudo rm -rf $(MAKE_DIST)
	sudo rm -rf /var/lib/mock/result/*-*-*
	sudo rm -rf /var/cache/mock/lintel-*-*-*
	sudo rm -rf /var/cache/pbuilder/result/*-*-*
	sudo rm -rf /var/cache/pbuilder/*.tgz
	sudo rm -rf /var/www/localpkgs/*-*-*
	-sudo rm ../*$(LINTEL_VERSION)* ../*$(DATASERIES_VERSION)*
	-(. redhat/get-version.sh; sudo rm $$rpm_topdir/SRPMS/{Lintel,DataSeries}*)
	-[ -d _MTN ] && sudo rm Release.info Changelog.mtn ../DataSeries/Release.info ../DataSeries/Changelog.mtn

# ------------ Packages -------------

packages: pbuilder-debian pbuilder-ubuntu mock-centos mock-fedora chroot-opensuse mock-scilinux

pbuilder-debian: $(PBUILDER_DEBIAN)

pbuilder-ubuntu: $(PBUILDER_UBUNTU)

mock-centos: $(MOCK_CENTOS)

mock-fedora: $(MOCK_FEDORA)

mock-scilinux: $(MOCK_SCILINUX)

chroot-opensuse: $(CHROOT_OPENSUSE)

sources:
	[ `id -u` != 0 ]
	sudo ./dist/rules $(MAKE_DIST)/lintel.dsc $(MAKE_DIST)/dataseries.dsc 
	sudo ./dist/rules $(MAKE_DIST)/lintel.srpm $(MAKE_DIST)/dataseries.srpm
	./dist/rules $(BUILD)/localhost/sources

# TODO: add support for caching of opensuse.
cache: cache-debian cache-ubuntu cache-centos cache-fedora cache-scilinux

cache-debian: $(foreach dist, $(DEBIAN_VERSIONS), $(foreach arch, amd64 i386, \
		    $(MAKE_DIST)/pbuilder/cache-debian-$(dist)-$(arch)))

cache-ubuntu: $(foreach dist, $(UBUNTU_VERSIONS), $(foreach arch, amd64 i386, \
		    $(MAKE_DIST)/pbuilder/cache-ubuntu-$(dist)-$(arch)))

# TODO: unify the naming convention (/pbuilder/cache-* vs /lintel/mock/cache-*)
cache-centos: $(foreach dist, $(CENTOS_VERSIONS), $(foreach arch, x86_64 i386, \
		    $(MAKE_DIST)/lintel/mock/cache-centos-$(dist)-$(arch)))

cache-fedora: $(foreach dist, $(FEDORA_VERSIONS), $(foreach arch, x86_64 i386, \
		    $(MAKE_DIST)/lintel/mock/cache-fedora-$(dist)-$(arch)))

cache-scilinux: $(foreach dist, $(SCILINUX_VERSIONS), $(foreach arch, x86_64 i386, \
		    $(MAKE_DIST)/lintel/mock/cache-scilinux-$(dist)-$(arch)))

.PRECIOUS: %.tgz %.gpg Release Sources Packages Release.config
.SECONDARY:

# ----- generic target rules ----

$(MAKE_DIST)/%: $(MAKE_DIST)/check/%
	@mkdir -p `dirname $@`
	touch $@
	@echo "Done with $@"

# ----- debian/ubuntu rules -----

# next bit through to $(MAKE_DIST)/pbuilder/cache-% is a hack to make sure that the files exist but
# not to rebuild them unless the stamp file is missing because if we do then we end up with a
# circular dependency -- lintel/pbuilder/% depends on %/Release.gpg, but making the lintel target
# will recreate the Release.gpg.

debian-localpkgs-%:
	$(SRC_LINTEL)/dist/debian-localpkgs.sh $* $(MAKE_DIST)/pbuilder/hooks

/var/www/localpkgs/%/dists/sid/Release.gpg:
	./dist/rules debian-localpkgs-$*

/var/cache/pbuilder/debian-%.tgz: 
	[ -f /var/www/localpkgs/debian-$*/dists/sid/Release.gpg ]
	[ ! -z "$$http_proxy" ]
	[ `id -u` = 0 ]
	pbuilder --create --basetgz $@-new --distribution `echo $* | sed 's/-.*//'` \
	    --debootstrapopts --arch=`echo $* | sed 's/.*-//'` \
	    --othermirror "deb http://localhost/localpkgs/debian-$* sid main" \
	    --mirror $(DEBIAN_MIRROR)
	mv $@-new $@

/var/cache/pbuilder/ubuntu-%.tgz: 
	[ -f /var/www/localpkgs/ubuntu-$*/dists/sid/Release.gpg ]
	[ ! -z "$$http_proxy" ]
	[ `id -u` = 0 ]
	# cdebootstrap does not work for maverick
	pbuilder --create --basetgz $@-new --distribution `echo $* | sed 's/-.*//'` \
	    --debootstrapopts --arch=`echo $* | sed 's/.*-//'` --debootstrap debootstrap \
	    --othermirror "deb $(UBUNTU_MIRROR) `echo $* | sed 's/-.*//'` universe |deb http://localhost/localpkgs/ubuntu-$* sid main" \
	    --mirror $(UBUNTU_MIRROR)
	mv $@-new $@

# Always rebuild if the stamp file is missing -- new run of the release process.
$(MAKE_DIST)/pbuilder/cache-%:
	mkdir -p `dirname $@`
	( $(SRC_LINTEL)/dist/rules /var/www/localpkgs/$*/dists/sid/Release.gpg && \
	  $(SRC_LINTEL)/dist/rules /var/cache/pbuilder/$*.tgz ) >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/lintel.rc:
	[ `id -u` = 0 ]
	(cd $(SRC_LINTEL) && dist/make-release-changelog.sh) >$@-new
	mv $@-new $@

$(MAKE_DIST)/lintel.dsc: $(MAKE_DIST)/lintel.rc
	(cd $(SRC_LINTEL) && dpkg-buildpackage -us -uc -S -ILintel/_MTN) >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/lintel/pbuilder/%: $(MAKE_DIST)/lintel.dsc $(MAKE_DIST)/pbuilder/cache-%
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	mkdir -p `dirname $@`

	[ -f ../lintel_$(LINTEL_VERSION).dsc ]
	perl debian/fixup-dsc.pl $* < ../lintel_$(LINTEL_VERSION).dsc >../lintel_$(LINTEL_VERSION)-$*.dsc
	[ ! -d /var/cache/pbuilder/result/$*/incoming ] \
	    || rm -rf /var/cache/pbuilder/result/$*/incoming
	(pbuilder --build --basetgz /var/cache/pbuilder/$*.tgz --debbuildopts "-j$(PARALLELISM)" \
	    --buildresult /var/cache/pbuilder/result/$*/incoming \
	    --hookdir $(MAKE_DIST)/pbuilder/hooks ../lintel_$(LINTEL_VERSION)-$*.dsc ) >$@-new 2>&1
	rm ../lintel_$(LINTEL_VERSION)-$*.dsc
	echo "---- rebuild package info ---" >>$@-new
	./dist/rules debian-localpkgs-$* >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries.rc:
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	(cd $(SRC_DATASERIES) && $(SRC_LINTEL)/dist/make-release-changelog.sh) >$@-new
	mv $@-new $@

$(MAKE_DIST)/dataseries.dsc: $(MAKE_DIST)/dataseries.rc
	(cd $(SRC_DATASERIES) && dpkg-buildpackage -us -uc -S -IDataSeries/_MTN) >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries/pbuilder/%: $(MAKE_DIST)/lintel/pbuilder/% $(MAKE_DIST)/dataseries.dsc
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	[ -f ../dataseries_$(DATASERIES_VERSION).dsc ]
	perl debian/fixup-dsc.pl $* < ../dataseries_$(DATASERIES_VERSION).dsc >../dataseries_$(DATASERIES_VERSION)-$*.dsc
	(pbuilder --build --basetgz /var/cache/pbuilder/$*.tgz --debbuildopts "-j$(PARALLELISM)" \
	    --buildresult /var/cache/pbuilder/result/$*/incoming \
	     --hookdir $(MAKE_DIST)/pbuilder/hooks \
            ../dataseries_$(DATASERIES_VERSION)-$*.dsc ) >>$@-new 2>&1
	rm ../dataseries_$(DATASERIES_VERSION)-$*.dsc
	mv $@-new $@

$(MAKE_DIST)/check/pbuilder/%: $(MAKE_DIST)/dataseries/pbuilder/%
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	./dist/rules debian-localpkgs-$* >$@-new 2>&1
	echo "--------------------------" >>$@-new
	(pbuilder --execute --basetgz /var/cache/pbuilder/$*.tgz \
	    --hookdir $(MAKE_DIST)/pbuilder/hooks -- dist/check-packages.sh --debian) >>$@-new 2>&1
	mv $@-new $@

# ----- srpm rules (centos, fedora, scilinux, opensuse) -----

$(MAKE_DIST)/lintel.srpm: $(MAKE_DIST)/lintel.rc
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	(cd $(SRC_LINTEL) && redhat/make-tar.sh ) >$@-new 2>&1
	(cd $(SRC_LINTEL) && dist/make-srpms.sh Lintel) >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries.srpm: $(MAKE_DIST)/dataseries.rc
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	(cd $(SRC_DATASERIES) && redhat/make-tar.sh) >$@-new 2>&1
	(cd $(SRC_DATASERIES) && $(SRC_LINTEL)/dist/make-srpms.sh DataSeries) >>$@-new 2>&1
	mv $@-new $@

# ----- centos/fedora/scilinux rules -----

repo-%:
	[ `id -u` = 0 ]
	[ ! -L /var/www/localpkgs/$*/$* ] || rm /var/www/localpkgs/$*/$*
	cd /var/www/localpkgs/$* && createrepo .
	[ ! -L /var/www/localpkgs/$*/$* ]
	for i in `cd /var/www/localpkgs; find $*/ -type f`; do curl http://localhost/localpkgs/$$i >/dev/null 2>&1; done
	[ ! -L /var/www/localpkgs/$*/$* ]

$(MAKE_DIST)/lintel/mock/%.repo: 
	[ `id -u` = 0 ]
	mkdir -p /var/lib/mock/result/$*
	chown anderse /var/lib/mock/result/$*
	chgrp mock /var/lib/mock/result/$*
	chmod 2775 /var/lib/mock/result/$*
	ln -snf /var/lib/mock/result/$* /var/www/localpkgs/$*
	mkdir -p `dirname $@`
	./dist/rules repo-$* >$@-new 2>&1
	mv $@-new $@

/etc/mock/lintel-%.cfg: $(SRC_LINTEL)/dist/mock-cfg.pl
	[ `id -u` = 0 ]
	$(SRC_LINTEL)/dist/mock-cfg.pl $*
	echo "made $@"

RCGZ := root_cache/cache.tar.gz
/var/cache/mock/lintel-%/$(RCGZ): $(MAKE_DIST)/lintel/mock/%.repo /etc/mock/lintel-%.cfg
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	echo $$http_proxy
	ls -l /etc/mock/lintel-$*.cfg
	mkdir -p $(MAKE_DIST)/logs
	mock --init -r lintel-$* 

$(MAKE_DIST)/lintel/mock/cache-%:
	mkdir -p `dirname $@`
	./dist/rules /var/cache/mock/lintel-$*/$(RCGZ) >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/lintel/mock/%: $(MAKE_DIST)/lintel.srpm $(MAKE_DIST)/lintel/mock/cache-%
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	mkdir -p `dirname $@`
	mock --rebuild --cleanup-after --resultdir=/var/lib/mock/result/$*/rpms \
	    -r lintel-$* `cd $(SRC_LINTEL) && redhat/get-srpm.sh $*` >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries/mock/%.repo: $(MAKE_DIST)/lintel/mock/% $(MAKE_DIST)/lintel/mock/%.repo
	[ `id -u` = 0 ]
	mkdir -p `dirname $@`
	./dist/rules repo-$* >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries/mock/%: $(MAKE_DIST)/dataseries/mock/%.repo $(MAKE_DIST)/dataseries.srpm
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	mkdir -p `dirname $@`
	mock --rebuild --cleanup-after --resultdir=/var/lib/mock/result/$*/rpms \
	    -r lintel-$* `cd $(SRC_DATASERIES) && ./redhat/get-srpm.sh $*` >$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/check/mock/%: $(MAKE_DIST)/dataseries/mock/%
	mkdir -p `dirname $@`
	mock --clean -r lintel-$* >$@-new 2>&1
	mock --init -r lintel-$* >>$@-new 2>&1
	mock --install -r lintel-$* yum db-utils db4-utils db45-utils >>$@-new 2>&1
	dist/rpm-dump /var/lib/mock/lintel-$*/root >>$@-new 2>&1
	./dist/rules repo-$* >>$@-new 2>&1
	mock --copyin -r lintel-$* dist/check-packages.sh / >>$@-new 2>&1
	mock --shell -r lintel-$* -- /check-packages.sh --yum >>$@-new 2>&1
	mock --clean -r lintel-$* >>$@-new 2>&1
	mv $@-new $@

# ----- openSuSE rules -----

$(MAKE_DIST)/lintel/chroot/%: $(MAKE_DIST)/lintel.srpm
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	mkdir -p `dirname $@` /var/lib/mock/result/$* 
	ln -snf /var/lib/mock/result/$* /var/www/localpkgs/$*
	./dist/rules repo-$* >$@-new 2>&1
	(cd $(SRC_LINTEL) && dist/opensuse-build.sh $*) >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/dataseries/chroot/%: $(MAKE_DIST)/lintel/chroot/% $(MAKE_DIST)/dataseries.srpm
	[ `id -u` = 0 ]
	[ ! -z "$$http_proxy" ]
	mkdir -p `dirname $@`
	./dist/rules repo-$* >$@-new 2>&1
	(cd $(SRC_DATASERIES) && $(SRC_LINTEL)/dist/opensuse-build.sh $*) >>$@-new 2>&1
	mv $@-new $@

$(MAKE_DIST)/check/chroot/%: $(MAKE_DIST)/dataseries/chroot/%
	mkdir -p `dirname $@`
	./dist/rules repo-$* >$@-new 2>&1
	./dist/opensuse-check.sh $* >>$@-new 2>&1
	mv $@-new $@

# ------------------------------------------------------------------------
# Testing on existing systems...

remote-hosts: 
	./dist/rules $(BUILD)/localhost/done
	# lots of parallelism for remote host build, it's all different machines
	./dist/rules -j 16 $(foreach host, $(TEST_HOSTS), $(BUILD)/remote-host/$(host)/result)

$(BUILD)/tmp.db:
	[ `id -u` != 0 ]
	sudo mkdir -p `dirname $@`
	sudo chown `whoami` `dirname $@`
	cp $(HOME)/.monotone/ssd.db $@-new
	# mtn -d $@-new db init
	# mtn -d $@-new pull $(MTN_PULL_FROM) ssd.hpl.hp.com/Lintel
	# mtn -d $@-new pull $(MTN_PULL_FROM) ssd.hpl.hp.com/DataSeries
# TODO: if we do a pull, do the check here also
#    HEAD="`mtn -d tmp.db automate heads ssd.hpl.hp.com/$i`"
#    REF_HEAD="`cd ~/projects/$i; mtn automate heads`"
#    if [ "$HEAD" != "$REF_HEAD" ]; then 
#	echo "Weird, heads differ between synced ($HEAD) and ~/projects/$i ($REF_HEAD)"
#	exit 1
#    fi

	mv $@-new $@

$(BUILD)/localhost/%/Changelog.mtn: $(BUILD)/tmp.db
	[ $(RELEASE_DATE) != unknown ]
	mkdir -p `dirname $@`
	(cd $(BUILD) && $(SRC_LINTEL)/dist/checkout.sh $*) >$(BUILD)/localhost/checkout.$* 2>&1

$(BUILD)/localhost/%.tar.bz2: $(BUILD)/localhost/%/Changelog.mtn
	(cd $(BUILD) && tar cvvfj $@-new --exclude=_MTN $*)
	mv $@-new $@

$(BUILD)/localhost/deptool-bootstrap-local: $(BUILD_OPT)/Lintel/src/deptool-bootstrap
	cp $< $@-new
	chmod +x $@-new
	mv $@-new $@

$(BUILD)/localhost/sources: $(BUILD)/localhost/Lintel-$(RELEASE_DATE).tar.bz2 \
    $(BUILD)/localhost/DataSeries-$(RELEASE_DATE).tar.bz2 $(BUILD)/localhost/deptool-bootstrap-local
	touch $@

$(BUILD)/localhost/done: $(BUILD)/localhost/sources
	mkdir -p `dirname $@`
	$(SRC_LINTEL)/dist/test-local.sh $(BUILD)/localhost $(RELEASE_DATE) >$@-new 2>&1
	mv $@-new $@

LR_DEPS := $(BUILD)/localhost/Lintel-$(RELEASE_DATE).tar.bz2 \
	$(BUILD)/localhost/DataSeries-$(RELEASE_DATE).tar.bz2
$(BUILD)/latest-release: $(LR_DEPS)
	echo "Lintel-$(RELEASE_DATE).tar.bz2" >$@-new
	echo "DataSeries-$(RELEASE_DATE).tar.bz2" >>$@-new
	mv $@-new $@

$(BUILD)/tesla: $(BUILD)/localhost/done $(BUILD)/latest-release
	rsync -av --progress $(LR_DEPS) $(BUILD)/localhost/build/Lintel/src/deptool-bootstrap \
	    $(BUILD)/latest-release tesla.hpl.hp.com:opensource/tmp  >$@-new 2>&1
	mv $@-new $@

$(BUILD)/remote-host/%/build: $(SRC_LINTEL)/dist/test-remote.sh $(BUILD)/tesla
	mkdir -p `dirname $@`
	scp $(SRC_LINTEL)/dist/test-remote.sh $*:$(REMOTE_TMP)/test-remote.sh >$@-new 2>&1
	ssh $* /bin/sh $(REMOTE_TMP)/test-remote.sh $(RELEASE_DATE) $*  >>$@-new 2>&1
	mv $@-new $@

$(BUILD)/remote-host/%/result: $(BUILD)/remote-host/%/build
	scp $*:$(REMOTE_TMP)/test-remote/result-$* $@-new
	[ "`cat $@-new`" = $(RELEASE_DATE) ]
	mv $@-new $@
