#!/bin/sh
#
# (c) Copyright 2008, Hewlett-Packard Development Company, LP
#
#  See the file named COPYING for license details
#
# script for rebuilding latex files

usage() { # Full manpage is at the bottom
    [ "$1" != "" ] && echo "$@"
    echo "Usage: $0"
    echo "  [--tex <path>] [--bib <path>] [--bst <path>] [--paper <paper-size>]"
    echo "  [--error-on-warnings] [--latex-binary <path>] [--disable-flock]"
    echo "  [--max-step-time <60 seconds>]"
    echo "  <srcdir> <main-texfile-basename>"
    echo "-----"
    echo "    <path> is a : separated sequence of paths"
    exit 0
}

LATEX_COMMAND="@LATEX_COMPILER@"
if [ "$1" = "--selfcheck" ]; then
    for i in "$LATEX_COMMAND" @BIBTEX_COMPILER@ @DVIPS_CONVERTER@ @PS2PDF14_CONVERTER@; do
	if [ ! -x $i ]; then
	    echo "lintel-latex-rebuild selfcheck failed; $i is missing"
	    exit 1
	fi
    done
    exit 0
fi

PAPER_SIZE=letter
CONTINUE=true
ERROR_ON_WARNINGS=false
# TODO: make this variable an option, ask Joe why when it was added the default 
# was 9000.
MIN_CROSSREFS=9000
USE_FLOCK=true
MAX_STEP_TIME=60
while $CONTINUE; do
    case "$1" in
	--tex)
	    shift
	    [ $# != 0 ] || usage
	    TEXINPUTS=$1:$TEXINPUTS
	    shift
	    ;;
	--bib)
	    shift
	    [ $# != 0 ] || usage
	    BIBINPUTS=$1:$BIBINPUTS
	    shift
	    ;;
	--bst)
	    shift
	    [ $# != 0 ] || usage
	    BSTINPUTS=$1:$BSTINPUTS
	    shift
	    ;;
	--paper)
	    shift
	    [ $# != 0 ] || usage
	    PAPER_SIZE=$1
	    shift
	    ;;
	--error-on-warnings)
	    shift
	    ERROR_ON_WARNINGS=true
	    ;;
	--latex-binary)
	    shift
	    [ $# != 0 ] || usage
	    LATEX_COMMAND="$1"
	    shift
	    ;;
        --disable-flock)
            shift
            USE_FLOCK=false;
            ;;
	--max-step-time) # maximum amount of time any individual rebuild step may take, abort if reached.
	    shift
	    [ $# != 0 ] || usage
	    MAX_STEP_TIME="$1"
	    shift
	    ;;
	*)
	    CONTINUE=false
	    ;;
    esac
done

[ $# != 2 -o "$1" = "-h" ] && usage "Missing arguments ($#)"

[ ! -d "$1" ] && usage "'$1' is not a directory"
[ ! -f "$1/$2.tex" ] && usage "'$1/$2.tex' is not a file"
[ `echo "$2" | wc -w` != 1 ] && usage "Main texfile is not one word"

TEXINPUTS=$1:$TEXINPUTS:@CMAKE_INSTALL_PREFIX@/share/lintel-latex-rebuild:
BIBINPUTS=$1:$BIBINPUTS:@CMAKE_INSTALL_PREFIX@/share/lintel-latex-rebuild:
BSTINPUTS=$1:$BSTINPUTS:@CMAKE_INSTALL_PREFIX@/share/lintel-latex-rebuild:

export TEXINPUTS
export BIBINPUTS
export BSTINPUTS
TEXFILE=$2

if [ -f $1/$TEXFILE.blg -o -f $1/$TEXFILE.bbl -o -f $1/$TEXFILE.dvi -o -f $1/$TEXFILE.aux ]; then
    echo "some of $1/$TEXFILE.{blg,bbl,dvi,aux} already exist."
    echo "this is likely to give you the wrong result; make clean in that dir?"
    exit 1
fi
    
if $USE_FLOCK; then
    FLOCK_BITS=`lintel-flock --filename=$TEXFILE.rebuild.lock --callpid=$$`
    # Lock will be auto-released when calling process exits, so do nothing to explicitly release
    case "$FLOCK_BITS" in
      success:*) echo "Acquired rebuild lock $TEXFILE.rebuild.lock" ;;
      *) echo "lintel-flock error: '$FLOCK_BITS'"; exit 1 ;;
    esac
fi

run_with_timeout() {
    echo "Starting $* with timeout $MAX_STEP_TIME"
    "$@" &
    WORK_PID=$!
    (sleep $MAX_STEP_TIME; kill -TERM $WORK_PID) >/dev/null 2>&1 &
    KILL_PID=$!
    wait $WORK_PID
    return_code=$?
    kill -INT $KILL_PID >/dev/null 2>&1
    return $return_code
}

rebuild_latex() {
    echo -n " latex"
    echo "" >>$TEXFILE.rebuild.out
    echo "--------------------------------------------------" >>$TEXFILE.rebuild.out
    echo "---                rebuild latex               ---" >>$TEXFILE.rebuild.out
    echo "--------------------------------------------------" >>$TEXFILE.rebuild.out
    run_with_timeout $LATEX_COMMAND $TEXFILE.tex </dev/null >>$TEXFILE.rebuild.out 2>&1
    latex_err=$?
    case $LATEX_COMMAND in
	# perltex drops the exit code from latex so we have to infer it from the output.
	*perltex) [ `grep 'Emergency stop.' $TEXFILE.rebuild.out | wc -l` -ge 1 ] && latex_err=77 ;;
    esac
}

rebuild_bibtex() {
    if grep citation $TEXFILE.aux >/dev/null 2>&1; then
        echo -n " bibtex"
        echo "" >>$TEXFILE.rebuild.out
        echo "--------------------------------------------------" >>$TEXFILE.rebuild.out
        echo "---               rebuild bibtex               ---" >>$TEXFILE.rebuild.out
        echo "--------------------------------------------------" >>$TEXFILE.rebuild.out
        run_with_timeout @BIBTEX_COMPILER@ --min-crossrefs=$MIN_CROSSREFS $TEXFILE >>$TEXFILE.rebuild.out 2>&1
        bibtex_err=$?
    else
	echo -n " (skip-bibtex-no-citations)"
	bibtex_err=0
    fi
}

rebuild() {
    echo "Latex rebuild run at `date` on `hostname`" >$TEXFILE.rebuild.out
    rebuild_latex
    rebuild_bibtex
}

# Two initial rounds to get enough far through that it could be stable
echo -n "initial latex rounds:"
rebuild
if [ $latex_err != 0 ]; then
    # clean up old files that may be bad and prevent a clean build.
    rm $TEXFILE.aux $TEXFILE.bbl $TEXFILE.blg
    rebuild
fi
rebuild_latex
echo " done."

i=0
# Run lots of times until it converges
while [ "`grep -c 'Rerun to get' $TEXFILE.rebuild.out`" != 0 ]; do
    i=`expr $i + 1`
    if [ $i -gt 10 ]; then
	echo "ERROR: unable to achieve latex convergence after 9 tries."
	echo "Log file is $TEXFILE.rebuild.out"
	exit 1
    fi
    echo -n "latex convergence round $i:" 
    rebuild
    rebuild_latex
    echo
done

dvips_err=0
dvipdf_err=0
if [ $latex_err = 0 -a $bibtex_err = 0 ]; then
    @DVIPS_CONVERTER@ -t $PAPER_SIZE -o $TEXFILE.ps.tmp $TEXFILE.dvi >>$TEXFILE.rebuild.out 2>&1
    dvips_err=$?
    # Make .ps file creation atomic
    [ $dvips_err = 0 ] && mv $TEXFILE.ps.tmp $TEXFILE.ps
    # Why not run dvipdf?  The current version of dvipdf defaults to A4 paper
    # and doesn't pass options to dvips (the underlying engine for dvipdf).
    # so we call dvips and ps2pdf14 directly.
    @DVIPS_CONVERTER@ -P pdf -P cmz -P amz -t $PAPER_SIZE -D 600 -Z -G0 -o $TEXFILE.pdftemp $TEXFILE.dvi >>$TEXFILE.rebuild.out 2>&1
    dvipstemp_err=$?
    # Note both options are needed to force all the fonts to be
    # embedded; file size effect seems to be small in one test case;
    # if that's wrong, then it should be made an option.
    # you can verify font embedding with pdffonts
    EMBEDFONTS="-dPDFSETTINGS=/prepress -dEmbedAllFonts=true"
    # Doesn't seem to be any downside to using these options.
    OPTIMIZE="-dOptimize=true -dUseFlateCompression=true"
    @PS2PDF14_CONVERTER@ $EMBEDFONTS $OPTIMIZE $TEXFILE.pdftemp $TEXFILE.pdf14tmp >>$TEXFILE.rebuild.out 2>&1
    ps2pdf14_err=$?
    # make .pdf file creation atomic.
    if [ $ps2pdf14_err = 0 ]; then
	mv $TEXFILE.pdf14tmp $TEXFILE.pdf
        rm $TEXFILE.pdftemp
    fi
fi

if [ $latex_err != 0 ]; then
    any_err=latex
elif [ $bibtex_err != 0 ]; then
    any_err=bibtex
elif [ $dvips_err != 0 ]; then
    any_err=dvips
elif [ $dvipstemp_err != 0 ]; then
    any_err=dvipstemp
elif [ $ps2pdf14_err != 0 ]; then
    any_err=ps2pdf14
fi

show_warnings() {
    echo "--------- Warnings for $TEXFILE ----------"
    grep -i warning $TEXFILE.rebuild.out
    echo "--------- Warnings for $TEXFILE ----------"
}

cleanup_abort() {
    echo "Full log file is $TEXFILE.rebuild.out"
    echo "$any_err failed, removing $TEXFILE.{dvi,ps,pdf} files"
    rm $TEXFILE.dvi $TEXFILE.ps $TEXFILE.pdf 
    exit 1
}

check_warnerror() {
    if $ERROR_ON_WARNINGS; then
	WARNING_COUNT=`grep -i warning $TEXFILE.rebuild.out | wc -l`
	if [ $WARNING_COUNT != 0 ]; then
	    show_warnings
	    echo "ERROR: Warnings are currently treated as errors"
	    cleanup_abort
	fi
    fi
}

if [ "$any_err" = "" ]; then
    check_warnerror
    show_warnings
    echo "Full log file is $TEXFILE.rebuild.out"
    echo "Successful latex rebuild." 
    exit 0
else 
    echo "--------- ERROR in $TEXFILE -----------"
    cat $TEXFILE.rebuild.out
    echo "--------- ERROR in $TEXFILE -----------"
    cleanup_abort
fi

POD=<<EOF

=pod

=head1 NAME

lintel-latex-rebuild - a program to rebuild latex documents correctly

=head1 DESCRIPTION

lintel-latex-rebuild takes an input .tex file and generates the derived .dvi, .ps, and .pdf files.

Rebuilding latex documents is surprisingly difficult.  latex and bibtex need to be run several
times in order to guarantee they have stabilized; sundry specify options need to be provided to the
converters to generate ps and pdf that are generally usable.  All of the options and techniques
have been worked out as a result of working around issues when creating documents and/or submitting
them to various conferences.

=head1 SYNOPSIS

 % lintel-latex-rebuild <options> <srcdir> <main-texfile-basename>

=head1 OPTIONS

=over 4

=item --tex I<path>

Specify a : separated list of paths for latex and tex to search for inputs

=item --bib <path>

Specify a : separated list of paths for bibtex to search for bibliography inputs

=item --bst <path>

Specify a : separated list of paths for bibtex to search for bibliography style inputs

=item --paper <paper-size>

Specify the paper size, i.e. letter or A4

=item --error-on-warnings

If latex or bibtex generate warnings, exit with an error.

=item --latex-binary <path>

Specify the latex binary to use, e.g. pdftex.

=item --disable-flock

Disable the code that automatically uses lintel-flock to take out a lock on a file in /tmp.
This code avoids issues with parallel makes building the same document twice at the same time.

=item --max-step-time <60 seconds>

Specify the maximum time that an individual step can take.  pdftex has been seen to hang
occasionally on centos.  This option at least causes the build to stop.

=item <srcdir>

Specify the directory containing the sources for the latex file.

=item <main-texfile-basename>

Specify the basename of the main texfile, i.e. if the file is C<my-paper.tex>, this option would be
C<my-paper>.  The resulting output will be C<my-paper>.{dvi,ps,pdf}

=back

=cut

EOF

