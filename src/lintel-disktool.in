#!@PERL_PATH@ -w
# -*- Perl -*-
use strict;
use Data::Dumper;
use DirHandle;
use English;
use File::Find;
use File::Path;
use FileHandle;

# TODO: redo file to conform with new coding convention

my $config_path = "/etc/lintel-disktool.config";
usage() unless @ARGV >= 1;
usage("You need to be root") unless 0 == $EUID;

$|=1;

if ($ARGV[0] eq 'partition') {
    partition_drives();
} elsif ($ARGV[0] eq 'add-serial') {
    shift @ARGV;
    addSerial(@ARGV);
} elsif ($ARGV[0] eq 'add-uuid') {
    shift @ARGV;
    addUuid(@ARGV);
} elsif ($ARGV[0] eq 'format') {
    format_drives();
} elsif ($ARGV[0] eq 'mount') {
    mount_drives();
} elsif ($ARGV[0] eq 'umount') {
    umount_drives();
} elsif ($ARGV[0] eq 'list') {
    list();
} elsif ($ARGV[0] eq 'zero') {
    zero_drives($ARGV[1]);
} elsif ($ARGV[0] eq 'debug-sfdisk') {
    $Global::debug = 1;
    my @ret = getSpecificSfdiskInfo($ARGV[1]);
    print Dumper(@ret);
} else {
    usage("Unknown command '$ARGV[0]'");
}

sub usage {
    my($msg) = @_;

    print STDERR "Error: @_\n" if @_;
    die "Usage: $0 (list)|(add_serial)|(partition)|(format)|(mount)|(umount)";
}
	
sub bydriveorder {
    return -1 if length $a < length $b; 
    return 1 if length $a > length $b; 
    return $a cmp $b;
} 


sub readConfig {
    return if @Global::drivepatterns > 0;

    open(CONFIG, $config_path) 
	or die "Unable to open $config_path for read: $!";

    while(<CONFIG>) {
	next if /^#/o || /^\s*$/o;
	if (/^drivepattern (\S+)$/o) {
	    push(@Global::drivepatterns, $1);
	} elsif (/^serial ('(.+)')$/o) {
	    # TODO-sprint: really ought to not pay attention to the trailing spaces in serial
	    # numbers and should strip them off
	    $Global::serials{$1} = 1;
	} elsif (/^uuid (\S+)$/o) {
	    $Global::uuids{$1} = 1;
	} elsif (/^mount_path\s+(\S+)$/o) {
	    $Global::mount_path = $1;
	} elsif (/^chmod_as\s+(\S+)$/o) {
	    $Global::chmod_as = $1;
	} elsif (/^clean_mounts_pattern\s*(\S+)$/o) {
	    $Global::clean_mounts_pattern = $1;
	} elsif (/^drive_to_dir_expr\s*(\S.+)$/o) { # has $count and $drive defined
	    $Global::drive_to_dir_expr = $1;
	} else {
	    chomp;
	    die "Unrecognized line in $config_path: '$_'";
	}
    }
    close(CONFIG);
    die "No drivepattern's found in $config_path"
	unless @Global::drivepatterns > 0;
}

sub find_drives {
    return @Global::drives if @Global::drives > 0;
    
    readConfig();
    my @devices;

    find(sub { return unless $File::Find::name =~ m!^/dev/[a-z]!o && -b $_;
	       #print "Hi $File::Find::name\n"; 
	       push(@devices, $File::Find::name); }, 
	 "/dev");

    print "Detecting drives for tracing ";
    my @drives;

    local $_;
    foreach $_ (@devices) {
	s!^/dev/!!o;

	foreach my $pat (@Global::drivepatterns) {
	    if (/^$pat$/) {
		push(@drives, $_);
		last;
	    }
	}
    }

    @drives = sort bydriveorder @drives;
    my $count = @drives;
    print "($count possibles): ";
    my @no_id_info;
    foreach my $drive (@drives) {
	is_drive($drive);

	my $serial = serial_number($drive);
	my $uuid = uuidNumber($drive);
	if (! defined $serial && ! defined $uuid) {
	    push(@no_id_info, $drive);
	} elsif (defined $serial && $Global::serials{$serial}) {
	    print ", " if @Global::drives;
	    push(@Global::drives, $drive);
	    print "$drive";
	} elsif (defined $uuid && $Global::uuids{$uuid}) {
	    print ", " if @Global::drives;
	    push(@Global::drives, $drive);
	    print "$drive";
	} else {
	    push(@Global::not_used_drives, $drive);
	}
    }
    print "\n";
    die "Unable to find any drives for tracing; ignored: " . join(" ", @Global::not_used_drives)
	unless @Global::drives;
    if (@no_id_info) {
	print "Unable to get sginfo -s or udevinfo on: ", join(", ", @no_id_info), "\n";
    }
    return @Global::drives;
}

sub list {
    my @drives = find_drives();
    if (@Global::not_used_drives) {
	print "Unused drives: ", join(", ", @Global::not_used_drives), "\n";
    }
    exit(0);
}

sub addSerial {
    my(@drives) = @_;

    open(CONFIG, ">>$config_path");
    foreach my $drive (@drives) {
	is_drive($drive);
	my $serial = serial_number($drive);
	die "Unable to get serial number from $drive"
	    unless defined $serial;
	print CONFIG "serial $serial\n";
    }
    close(CONFIG);
}

sub addUuid {
    my(@drives) = @_;

    my $config = new FileHandle ">>$config_path"
	or die "Can't open $config_path for append: $!";

    foreach my $drive (@drives) {
	is_drive($drive);
	my $uuid = uuidNumber($drive);
	die "Unable to get uuid number from $drive"
	    unless defined $uuid;
	print $config "uuid $uuid\n";
    }
    close($config);
}
	

sub partition_drives {
    my @drives = find_drives();

    my %ok = get_ok_partitions();

    print "drives partitioned correctly: ";
    my @ok = sort bydriveorder keys %ok;
    print join(", ", @ok), "\n";
    print "partitioning: ";
    my $first = 1;
    foreach my $drive (@drives) {
	next if $ok{$drive};
	print ", " unless $first;
	$first = 0;
	print "$drive";
	open(SFDISK, "| sfdisk /dev/$drive >/dev/null 2>&1")
	    or die "??";
	print SFDISK "0,\n";
	close(SFDISK);
	die "??" unless $? == 0;
    }
    print "\n";
    if ($first == 0) {
	print "checking...";
	my %new_ok = get_ok_partitions();
	foreach my $drive (@drives) {
	    die "$drive isn't ok??" unless $new_ok{$drive};
	}
	print "all correct.\n";
    }
}

sub driveToPartition {
    my ($drive) = @_;

    return "/dev/${drive}1" if -b "/dev/${drive}1";
    return "/dev/${drive}p1" if -b "/dev/${drive}p1";
    die "Unable to convert $drive to partition";
}

sub format_drives {
    my @drives = find_drives();
    my %ok = get_ok_partitions();
    my %mounted = get_mounted();

    my $fs = 'ext2';
    print "formatting as $fs (in parallel): ";
    my $ok = 1;
    my %children;
    foreach my $drive (@drives) {
	print ", " unless $drive eq $drives[0]; 
	print "$drive";
	unless ($ok{$drive}) {
	    warn "\n$drive isn't partitioned correctly, aborting...";
	    $ok = 0;
	    last;
	}
	if ($mounted{$drive}) {
	    warn "\n$drive is already mounted, aborting...";
	    $ok = 0;
	    last;
	}
	my $pid = fork();
	unless (defined $pid && $pid >= 0) {
	    warn "\nfork failed: $!";
	    $ok = 0;
	    last;
	}
	if ($pid == 0) {
	    my $ret = system("dd if=/dev/zero of=/dev/${drive}1 bs=1024k count=1 >/dev/null 2>&1");
	    die "\ndd failed for /dev/${drive}1" 
		unless $ret == 0;
	    my $partition = driveToPartition($drive);
	    if ($fs eq 'ext2') {
		$ret = system("mkfs.ext2 -m 0 -O sparse_super -T largefile4 $partition >/dev/null 2>&1");
		die "\nmkfs.ext2 failed for $partition"
		    unless $ret == 0;
	    } elsif ($fs eq 'xfs')  {
		$ret = system("mkfs.xfs $partition >/dev/null 2>&1");
		die "\nmkfs.xfs failed for $partition"
		    unless $ret == 0;
	    } else {
		die "huh $fs";
	    }
	    exit(0);
	}
	$children{$pid} = $drive;
	select(undef,undef,undef,0.1);
    }
    print "\n";
    print "waiting: ";
    my $first = 1;
    my %success;
    while((my $pid = wait) > 0) {
	print ", " unless $first;
	$first = 0;
	$children{$pid} ||= "UNKNOWN";
	print "$children{$pid}";
	$success{$children{$pid}} = 1;
	delete $children{$pid};
    }
    print "\n";
    foreach my $drive (@drives) {
	die "Failed to format $drive" unless $success{$drive};
    }
    die "Something wasn't ok" unless $ok;
}
    
sub mount_drives {
    my @drives = find_drives();
    my %mounted = get_mounted();
    
    die "Unable to mount drives, $config_path doesn't define mount_path"
	unless defined $Global::mount_path;
    die "Unable to mount drives, $config_path doesn't define drive_to_dir_expr"
	unless defined $Global::drive_to_dir_expr;
    unless (-d $Global::mount_path) {
	mkpath($Global::mount_path);
    }
    if (defined $Global::chmod_as) {
	system("chmod --reference=$Global::chmod_as $Global::mount_path") == 0 
	    or die "unable to chmod $Global::mount_path as $Global::chmod_as";
    }

    if (defined $Global::clean_mounts_pattern) {
	print "Cleaning...";

	my $dir = new DirHandle($Global::mount_path);
	my @dirs = grep(/$Global::clean_mounts_pattern/o && !$mounted{$_}, readdir($dir));
	foreach my $dir (@dirs) {
	    print " $dir";
	    rmdir("$Global::mount_path/$dir") 
		or die "Unable to rmdir $Global::mount_path/$dir: $!";
	}
	print " done\n";
    }

    my $count = 0;
    print "Mounting...";
    foreach my $drive (@drives) {
	next if $mounted{$drive};
	print ", " unless $count == 0; 
	print $drive;
	my $dir = eval $Global::drive_to_dir_expr;
	die "drive_to_dir_expr error: $@" if $@;
	die "$drive -> $dir (/ disallowed)" if $dir =~ m!/!o;

	my $path = "$Global::mount_path/$dir";
	unless (-d $path) {
	    mkdir($path, 0777) or die "unable to mkdir($path): $!";
	}
	my $partition = driveToPartition($drive);
	my $ret = system("mount $partition $path");
	die "mount failed" unless $ret == 0;
	if (defined $Global::chmod_as) {
	    system("chmod --reference=$Global::chmod_as $path") == 0
		or die "chmod of $path as $Global::chmod_as failed: $!";
	}
	++$count;
    }
    print "; " unless $count == 0;
    print "done.\n";
}

sub umount_drives {
    my %mounted = get_mounted();

    print "Unmounting...";
    my $first = 1;
    foreach my $mounted (sort bydriveorder keys %mounted) {
	print ", " unless $first;
	$first = 0;
	print "$mounted";
	my $ret = system("umount $Global::mount_path/$mounted");
	die "umount failed" unless $ret == 0;
	if (defined $Global::clean_mounts_pattern 
	    && $mounted =~ /$Global::clean_mounts_pattern/o) {
	    rmdir("$Global::mount_path/$mounted")
		or die "rmdir($Global::mount_path/$mounted) failed: $!";
	}
    }
    print "; " unless $first;
    print "done.\n";
}    

sub zero_drives {
    my ($regex) = @_;

    if (defined $regex) {
	$regex = qr/$regex/;
    } else {
	$regex = qr/./;
    }
    my @drives = find_drives();
    die "no drives??" unless @drives > 0;

    my %mounted = get_mounted();

    die "some drives are still mounted"
	if keys %mounted > 0;

    my %sizes = get_drive_sizes();

    @drives = grep(/$regex/, @drives);
    die "no drives remain after applying regex '$regex'"
	unless @drives > 0;

    map { die "no size info for drive $_" unless defined $sizes{$_} } @drives;

    print "zeroing drives (in parallel): ";
    my %children;
    my $ok = 1;
    foreach my $drive (@drives) {
	print ", " unless $drive eq $drives[0];
	my $size = $sizes{$drive};
	print "$drive";
	die "??" unless defined $size && $size->{cylinders} > 1000 && $size->{cylinder_bytes} > 1000000;
	my $pid = fork();
	unless (defined $pid && $pid >= 0) {
	    warn "\nfork failed: $!";
	    $ok = 0;
	    last;
	}
	if ($pid == 0) {
	    my $ret = system("dd if=/dev/zero of=/dev/${drive} bs=$size->{cylinder_bytes} count=$size->{cylinders} >/tmp/zero.${drive} 2>&1");
	    die "\ndd failed for /dev/${drive}" 
		unless $ret == 0;
	    # TODO: check output to verify we zeroed enough.
	    exit(0);
	}
	$children{$pid} = $drive;
	select(undef,undef,undef,0.1);
    }
    print "\n";
    print "waiting: ";
    my $first = 1;
    my %success;
    while((my $pid = wait) > 0) {
	print ", " unless $first;
	$first = 0;
	$children{$pid} ||= "UNKNOWN";
	print "$children{$pid}";
	$success{$children{$pid}} = 1;
	delete $children{$pid};
    }
    print "\n";
    foreach my $drive (@drives) {
	die "Failed to format $drive" unless $success{$drive};
    }
    die "Something wasn't ok" unless $ok;
}

sub get_mounted {
    readConfig();

    die "Can't get mounted, $config_path does not define mount_path"
	unless defined $Global::mount_path;
    my %mounted;
    open(MOUNT, "mount |") or die "??";
    while(<MOUNT>) {
	next unless m!^/dev/\S+1 on $Global::mount_path/([^/ ]+) type \S+ \S+$!o;
	$mounted{$1} = 1;
    }
    close(MOUNT);
    return %mounted;
}


sub get_ok_partitions {
    my($ok, $sizes) = get_sfdisk_info();
    return %$ok;
}

sub get_drive_sizes {
    my($ok, $sizes) = get_sfdisk_info();
    return %$sizes;
}


sub getSpecificSfdiskInfo {
    my ($diskpath) = @_;
    my %ok;
    my %sizes;
    open(SFDISK, "sfdisk -uS -l $diskpath 2>&1 |") or die "bad";
    while(<SFDISK>) {
	die "??1 '$_'" unless /^\s*$/o;
	$_ = <SFDISK>;
	die "?? $_ ??" unless m!^Disk /dev/(\S+): (\d+) cylinders, (\d+) heads, (\d+) sectors/track!o;
	my ($drive, $cylinders, $heads, $sectorspercyl) = ($1,$2, $3, $4);
	$sizes{$drive} = {'cylinders' => $cylinders, 'heads' => $heads, 
			  'sectors_per_cylinder' => $sectorspercyl, 'sector_bytes' => 512,
			  'cylinder_bytes' => $heads * $sectorspercyl * 512};
	$_ = <SFDISK>;
	if (/^Warning: The partition table/o) {
	    $_ = <SFDISK>; die "??" unless m!^  for C/H/S=!o;
	    $_ = <SFDISK>; die "??" unless m!^For this listing I'll assume!o;
	    $_ = <SFDISK>;
	}
	if (/^$/o) {
	    $_ = <SFDISK>;
	    die "??" unless /^sfdisk: ERROR: sector 0 does not have an msdos signature/o;
	    $_ = <SFDISK>;
	    die "??" unless m!^ /dev/${drive}: unrecognized partition table type!;
	    $_ = <SFDISK>;
	    die "??" unless /^No partitions found/o;
	    next;
	}
	die "$_ ?? " unless m!^Units = sectors of 512 bytes, counting from 0$!o;
	$_ = <SFDISK>;
	die "??" unless /^\s*$/o;
	$_ = <SFDISK>;
	die "$_ ??" unless /^   Device Boot    Start       End   #sectors  Id  System$/o;
	$_ = <SFDISK>;
	die "?? $drive\n$_ ??" unless m!^/dev/${drive}p?1\s+!;
	my @bits = split(/\s+/o);

	# Since we will not have DOS access these disks and we don't
	# boot from them, don't waste the little bit of space at the
	# front.  Every bit helps.

	my $expected_sectors = 1.0 * $cylinders * $heads * $sectorspercyl - 1;
	printf "Maybe %d; $bits[1] == 1; $bits[2] == %.0f; $bits[3] == %.0f\n", 
   	    scalar @bits, $expected_sectors, $expected_sectors 
		if $Global::debug;
	if (-b $bits[0] && @bits == 6 && $bits[1] =~ /^\d+$/o && $bits[1] == 1
	    && $bits[2] =~ /^\d+$/o && $bits[2] == $expected_sectors 
	    && $bits[3] =~ /^\d+$/o && $bits[3] == $expected_sectors) {
	    $ok{$drive} = 1;
	}
	$_ = <SFDISK>; die "??" unless m!^/dev/${drive}p?2\s+!;
	$_ = <SFDISK>; die "??" unless m!^/dev/${drive}p?3\s+!;
	$_ = <SFDISK>; die "??" unless m!^/dev/${drive}p?4\s+!;
    }
    close(SFDISK);
    return (\%ok, \%sizes);
}    

sub get_sfdisk_info { 
    # The old get_sfdisk_info would ask about every drive, even ones
    # we're not supposed to touch.  If a drive was listed don't touch
    # because it is broken, we were still probing it; this makes the
    # parsing uphappy.  Rather than make the parsing tolerate broken
    # drives, we'll still choke on a broken drive, and instead try to
    # probe only those drives listed as OK to poke.

    my @drives = find_drives();
    my %ok;
    my %sizes;

    # We're getting 1 (or more, but probably 1) sfdisk_info from
    # getSpecificSfdiskInfo, then appending it to ok and sizes; the pattern
    # to append to the hashes was taken from:
    # http://stackoverflow.com/questions/350018/how-can-i-combine-hashes-in-perl/350190

    foreach my $drive (@drives) {
	my($tempOK, $tempSizes) = getSpecificSfdiskInfo("/dev/$drive");
	@ok{keys %$tempOK} = values %$tempOK;
	@sizes{keys %$tempSizes} = values %$tempSizes;
    }
    return (\%ok, \%sizes);
}

sub serial_number {
    my($drive) = @_;

    $drive =~ s!^/dev/!!o;
    my $ret;
    open(SGINFO, "sginfo -s /dev/$drive 2>&1 |")
	or die "bad";
    $_ = <SGINFO>;
    if (!defined $_) {
	$ret = undef;
    } elsif (/^Serial Number ('(.+)')$/) {
	$ret = $1;
    } elsif (/^Error doing INQUIRY/o) {
	$ret = undef;
    } elsif (/^A device name that understands SCSI/o) {
	$ret = undef;
    } else {
	chomp;
	die "First line from sginfo -s /dev/$drive not 'Serial Number ...', but '$_'";
    }
    close(SGINFO);
    return $ret;
}

sub uuidNumber {
    my ($drive) = @_;

    $drive =~ s!^/dev/!!o;
    my $ret;
    my $fh = new FileHandle "udevinfo -q symlink --name /dev/$drive |"
	or die "Unable to run udevinfo: $!";
    local $_ = <$fh>; chomp;
    if (m!^disk/by-uuid/([a-f0-9-]+)\s*$!o) {
	$ret = $1;
    } else {
	# ignore
    }
    close($fh);
    
    return $ret;
}

sub is_drive { # not partition
    my ($drive) = @_;

    $drive =~ s!^/dev/!!o;
    my @stat = stat("/dev/$drive");
    die "Stat of /dev/$drive failed: $!"
	unless @stat;

    die "$config_path pattern matched $drive, which is a partition, not a drive"
	unless 0 == ($stat[6] & 0xF);
    
}

