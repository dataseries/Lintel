#!@PERL_PATH@ -w
# vim: set filetype=perl: # -*- Perl -*-
use strict;
use Carp;
use Data::Dumper;
use DirHandle;
use English;
use File::Find;
use File::Path;
use FileHandle;
use Getopt::Long;
use Safe;

@PERL5_MODULES_INC_UNSHIFT@
use Lintel::ProcessManager;

# TODO: redo file to conform with new coding convention

# TODO: add pod documentation.  Fix up the usage...

# TODO: remove all the globals except for %config;

# TODO: think about the configuration a bit more, if we want to properly
# support lvm and md configurations, then we need something more sophisticated.

my %config;

my $config_path = "/etc/lintel-disktool.config";
usage() unless @ARGV >= 1;

unless ($EUID == 0) {
    print "You need to be root, trying to re-run self under sudo.\n";
    exec "sudo", "$0", @ARGV;
    die "exec failed: $!";
}

=pod

=head2 Options

=over

=item --debug

Show what is being done in detail

=item --config I<configfile>

Load the specified configuration file instead of the default in:
/etc/lintel-disktool.config

=back

=cut

my $success = GetOptions("debug!" => \$Global::debug,
			 "config=s" => \$config_path);

usage() unless $success;

$|=1;

my $cmd = shift @ARGV;
if ($cmd eq 'partition') {
    partitionDrives();
# TODO: add a "add-serial" replacement that will list the needed serials
# to make it easier for a human to put it into the config file
} elsif ($cmd eq 'format') {
    formatDrives();
} elsif ($cmd eq 'fsck') {
    fsckDrives();
} elsif ($cmd eq 'mount') {
    mountDrives();
} elsif ($cmd eq 'umount') {
    umountDrives(@ARGV);
} elsif ($cmd eq 'list') {
    list();
} elsif ($cmd eq 'zero') {
    zeroDrives($ARGV[1]);
} elsif ($cmd eq 'fail') {
    failDrives(@ARGV);
} elsif ($cmd eq 'visual-check') {
    visualCheck(@ARGV);
} elsif ($cmd eq 'scan') {
    # TODO: this doesn't work for high scsi-ids (e.g. 0:0:26:0 /dev/sdz)
    # might have to track the specific id and add it.  scsiadd -a 26 works.
    system("scsiadd -s") == 0 || die "scsiadd -s failed";
} elsif ($cmd eq 'debug-sfdisk') {
    $config{debug} = 1;
    my @ret = getSpecificSfdiskInfo($ARGV[1]);
    print Dumper(@ret);
} else {
    usage("Unknown command '$cmd'");
}

exit(0);

sub usage {
    my($msg) = @_;
    print STDERR "Error: @_\n" if @_;
    die "Usage: $0 (list)|(partition)|(format)|(mount)|(fsck)|(umount)|(fail path)|(scan)";
}
	
sub bydriveorder {
    return -1 if length $a < length $b; 
    return 1 if length $a > length $b; 
    return $a cmp $b;
} 

=pod

=head2 Configuration File Format

    debug: turn on debugging messages.

    drivepatterns: which patterns to look for in /dev for drives.

    mount_path: where to mount the drive.

    fs: which file system to format them with.

    sysfs_ids, serials: fsids or serial numbers of drives in play.

    mount
	{
	    debug => 0|1,
	    drivepatterns => [ qw/sd[a-z] sd[a-z][a-z]/ ],
	    mount_path => '/kba',
	    clean_mounts_pattern => '^disk\d+$',
	    fs => 'ext2|xfs' | sub { my ($drive, $partition, $label) },
	    chmod_as => '/dev/shm',
	    sysfs_ids => [ ... ],
	    serials => [qw/H809B8GH H808B6EH H80D006H H80AR0PH Y692Z19E
                           H80E6P2H H80GJTBH/], # drives used in this config
            known_serials => [qw/... list of serials that are recognized by this config .../],
            reserved => sub { my ($serial, $sysfs_id) = @_; return $drive_is_reserved; },

            # $disk_info = { 'serial' => serial, 'sysfs_id' => sysfs_id, 'drive' => drive }}
	    partition_to_label => sub {
		my ($partition, $existing_label_to_partition, $disk_info) = @_;

	    }
	    label_to_mount_path => sub {
		my ($label, $disk_info) = @_;
		
		die "bad label $label" unless /^disk(\d+)$/o;
		my $disk_num = $1;
		if ($disk_num < 5) {
		    return "/production/$label";
		} else {
		    return "/test/disk" . ($disn_num - 5);
		}
	    }
	}

=cut

sub toMap {
    my ($in, $what) = @_;

    return $in unless defined $in;
    return $in if ref $in eq 'HASH';

    return { $in => 1 } unless ref $in;
    confess "$in from $what not an array" unless ref $in eq 'ARRAY';
    
    my %ret;
    map { $ret{$_} = 1 } @$in;
    return \%ret;
}
    
sub readConfig {
    return if defined $config{drivepatterns};

    my $data;
    {
	local $/; # slurp
	my $fh = new FileHandle($config_path)
	    or die "Unable to open $config_path for read: $!";
	
	$data = <$fh>;
    }

    $Global::compartment = new Safe;
    $Global::compartment->permit('require');
    
    my $result = $Global::compartment->reval($data);
    if ($@) {
	die "Error evaluating $config_path:\n$@";
    } else {
	die "$config_path should return a hash ref"
	    unless ref $result eq 'HASH';
	%config = %$result;
	$config{debug} ||= $Global::debug;
	$config{serials} = toMap($config{serials}, 'serials');
	print "Hi-sysfs_ids $config{sysfs_ids}\n" if $Global::debug;
	$config{sysfs_ids} = toMap($config{sysfs_ids}, 'sysfs_ids');
	print "Hi-sysfs_ids ", join(", ", keys %{$config{sysfs_ids}}), "\n" if $Global::debug;


	unless (defined $config{label_to_mount_path}) {
	    die "Unable to create automatic label_to_mount_path fn"
		unless defined $config{mount_path} && $config{mount_path} =~ m!^/!o;
	    $config{label_to_mount_path} = sub {
		return "$config{mount_path}/$_[0]";
	    }
	}
	# TODO: it would be nice to know all the possible valid config names and
	# check that there aren't any unknown ones, also have required and optional
    }

    die "No drivepattern's found in $config_path"
	unless defined $config{drivepatterns} && @{$config{drivepatterns}} > 0;
    $config{fs} ||= 'ext3';
}

sub findDrives {
    return @Global::drives if @Global::drives > 0;
    
    readConfig();
    my @devices;

    find(sub { return unless $File::Find::name =~ m!^/dev/[a-z]!o && -b $_;
#	       print "Hi $File::Find::name\n"; 
	       push(@devices, $File::Find::name); }, 
	 "/dev");

    print "Detecting drives for tracing ";
    my @drives;

    local $_;
    foreach $_ (@devices) {
	s!^/dev/!!o;

	foreach my $pat (@{$config{drivepatterns}}) {
	    if (/^$pat$/) {
		print "$_ matches $pat\n" if $Global::debug;
		push(@drives, $_);
		last;
	    } else {
		print "$_ does not match $pat\n" if $Global::debug;
	    }
	}
    }

    print "Allowed serial numbers: ", join(", ", sort keys %{$config{serials}}), "\n";
    print "Allowed sysfs ids: ", join(", ", sort keys %{$config{sysfs_ids}}), "\n";

    @drives = sort bydriveorder @drives;
    my $count = @drives;
    print "($count possibles): ";
    my @no_id_info;
    $config{reserved_drives} = [];
    $config{not_used_drives} = [];
    foreach my $drive (@drives) {
	is_drive($drive);

	my $serial = serialNumber($drive) || '';
	my $sysfs_id = sysfsIdNumber($drive) || '';
	$config{all_drives}->{$drive} = {
	    serial => $serial,
	    sysfs_id => $sysfs_id,
	    drive => $drive,
	} if defined($serial) || defined($sysfs_id);
	$config{all_serials}->{$serial} = $drive if defined ($serial);
	$config{all_sysfs_ids}->{$sysfs_id} = $drive if defined ($sysfs_id);

	if (! defined $serial && ! defined $sysfs_id) {
	    push(@no_id_info, $drive);
	} elsif (defined $config{reserved} && &{$config{reserved}}($serial, $sysfs_id)) {
	    push(@{$config{reserved_drives}}, $drive);
	} elsif (defined $serial && $config{serials}{$serial}) {
	    print ", " if @Global::drives;
	    push(@Global::drives, $drive);
	    print "$drive";
	} elsif (defined $sysfs_id && $config{sysfs_ids}{$sysfs_id}) {
	    print ", " if @Global::drives;
	    push(@Global::drives, $drive);
	    print "$drive";
	} else {
	    print "\nno match $drive(serial='$serial', sysfs_id='$sysfs_id')\n" if $config{debug};
	    push(@{$config{not_used_drives}}, $drive);
	}
    }
    print "\n";
    warn "Unable to find any drives for tracing; ignored: " . join(" ", @{$config{not_used_drives}})
	unless @Global::drives;
    if (@no_id_info) {
	print "Unable to get sginfo -s or sysfs info on: ", join(", ", @no_id_info), "\n";
    }
    return @Global::drives;
}

sub list {
    my @drives = findDrives();
    print "Unused drives: ", join(" ", @{$config{not_used_drives}}), "\n";
    my @unused_serials = map { $config{all_drives}->{$_}->{serial} } @{$config{not_used_drives}};
    print "Unused serials: ", join(" ", @unused_serials), "\n";
    print "Reserved drives: ", join(" ", @{$config{reserved_drives}}), "\n";

    if (defined $config{known_serials}) {
	my %found_serials;
	map { $found_serials{$config{all_drives}->{$_}->{serial}} = 1 } 
            keys %{$config{all_drives}};
	my @lost_serials = grep(!defined $found_serials{$_}, @{$config{known_serials}});
	print "Drives listed in config but not present: ", join(" ", @lost_serials), "\n";
	
	my %known_serials;
	map { $known_serials{$_} = 1 } @{$config{known_serials}};

	my @unknown_serials = grep(!defined $known_serials{$_}, @unused_serials);
	print "Drives not listed in config: ", join(" ", @unknown_serials), "\n";
    }
    exit(0);
}	

sub removeMeta {
    local ($_) = @_;

    s/\W/_/go;
    return $_;
}

# TODO: probably should do this in parallel also, as in formatting
sub partitionDrives {
    my @drives = findDrives();

    my %ok = get_ok_partitions();

    print "drives partitioned correctly: ";
    my @ok = sort bydriveorder keys %ok;
    print join(", ", @ok), "\n";
    my @logs;
    print "partitioning: ";
    my $first = 1;
    foreach my $drive (@drives) {
	my $log = removeMeta($drive);
	if ($ok{$drive}) {
	    unlink("/tmp/lintel-disktool.partition.$log");
	    next;
	}
	print ", " unless $first;
	$first = 0;
	print "$drive";
	open(SFDISK, "| sfdisk /dev/$drive >/tmp/lintel-disktool.partition.$log 2>&1")
	    or die "??";
	print SFDISK "0,\n";
	close(SFDISK);
	die "??" unless $? == 0;
    }
    print "\n";
    if ($first == 0) {
	print "checking...";
	my %new_ok = get_ok_partitions();
	foreach my $drive (@drives) {
	    my $log = removeMeta($drive);
	    die "$drive isn't ok, examine /tmp/lintel-disktool.partition.$log??" 
		unless $new_ok{$drive};
	    unlink("/tmp/lintel-disktool.partition.$log");
	}
	print "all correct.\n";
    }
}

sub driveToPartition {
    my ($drive) = @_;

    return "/dev/${drive}1" if -b "/dev/${drive}1";
    return "/dev/${drive}p1" if -b "/dev/${drive}p1";
    die "Unable to convert $drive to partition";
}

sub zeroPartition {
    my ($partition) = @_;

    my $ret = system("dd if=/dev/zero of=$partition bs=1024k count=1 >/dev/null 2>&1");
    die "\ndd failed for $partition" 
	unless $ret == 0;
}

sub formatOneDrive {
    my ($drive, $fs, $label) = @_;

    my $partition = driveToPartition($drive);
    if (ref $fs) {
	$fs = &$fs($drive, $partition, $label);
    }

    if ($fs eq 'ext2') {
	zeroPartition($partition);
	my $ret = system("mkfs.ext2 -m 0 -O sparse_super,dir_index -L $label $partition >/dev/null 2>&1");
	die "\nmkfs.ext2 failed for $partition"
	    unless $ret == 0;
    } elsif ($fs eq 'ext3') {
	zeroPartition($partition);
	my $ret = system("mkfs.ext3 -m 0 -O sparse_super,dir_index -L $label $partition >/dev/null 2>&1");
	die "\nmkfs.ext2 failed for $partition"
	    unless $ret == 0;
    } elsif ($fs eq 'xfs')  {
	zeroPartition($partition);
	my $ret = system("mkfs.xfs -L $label $partition >/dev/null 2>&1");
	die "\nmkfs.xfs failed for $partition"
	    unless $ret == 0;
    } elsif ($fs eq 'reserved') {
	exit(0);
    } else {
	die "huh $fs";
    }
    exit(0);
}

sub getPartitionLabel {
    my ($partition) = @_;

    my $cmd = "/lib/udev/vol_id $partition 2>&1";
    my $fh = new FileHandle "$cmd |"
	or die "Can't run $cmd: $!";
    while (<$fh>) {
	return '' if /unknown volume type/o;
	return $1 if /^ID_FS_LABEL=(.*)$/o;
    }
    die "Did not find ID_FS_LABEL=.* in output of $cmd";
}

sub nextUnique {
    my ($expr, $existing) = @_;

    for (my $i = 0; 1; ++$i) {
	$Global::compartment->reval("\$i = $i");
	die $@ if $@;
	my $v = $Global::compartment->reval($expr);
	die "$expr failed: $@" if $@;
	return $v unless defined $existing->{$v};
    }
}

sub formatDrives {
    my @drives = findDrives();
    my %ok = get_ok_partitions();
    my %mounted = getMounted(1);

    my $fs = $config{fs};

    my %label_to_partition;
    my %drive_to_label;

    die "Can not format drives, config{partition_to_label} not code"
	unless ref $config{partition_to_label} eq 'CODE';

    $Global::compartment->share('&nextUnique');

    foreach my $drive (@drives) {
	unless ($ok{$drive}) {
	    die "$drive isn't partitioned correctly, aborting...";
	}
	my $partition = driveToPartition($drive);
	die "$partition is missing" unless -r $partition;
	my $label = getPartitionLabel($partition);
	print "($partition, $label)" if $config{debug};

	if ($label ne '' && $label =~ /^\w{1,12}$/o) {
	    # Verify that label can be mapped to a path.
	    call('label_to_mount_path', $label, $config{all_drives}->{$drive});
	    $label_to_partition{$label} = $partition;
	}
    }

    foreach my $drive (@drives) {
	my $partition = driveToPartition($drive);
	my $label = getPartitionLabel($partition);
	$label = call('partition_to_label', $partition, \%label_to_partition, 
		      $config{all_drives}->{$drive})
	    if $label eq '';

	# 12 character label length maximum for XFS
	die "label '$label' is not valid for $partition"
	    unless defined $label && $label =~ /^\w{1,12}$/o;
	
	die "Duplicate label '$label' for $partition and $label_to_partition{$label}"
	    if defined $label_to_partition{$label} && $label_to_partition{$label} ne $partition;
	$label_to_partition{$label} = $partition;
	die "?" if defined $drive_to_label{$partition};
	$drive_to_label{$drive} = $label;
    }

    my $process_manager = new Lintel::ProcessManager();

    my @failed;
    print "formatting as $fs (in parallel): ";
    foreach my $drive (@drives) {
	my $partition = driveToPartition($drive);
	if ($mounted{$partition}) {
	    print "(mounted-$drive) ";
	    next;
	}

	print "$drive ";
	$process_manager->fork
	    (cmd => sub { formatOneDrive($drive, $fs, $drive_to_label{$drive}); },
	     exitfn => sub { my ($pid, $status) = @_;
			     
			     if ($status == 0) {
				 print "$drive ";
			     } else {
				 print "$drive(not-ok) ";
				 push(@failed, $drive);
			     }
			 });

	# slight delay between starting formats eliminates massive
	# slowdown experience with many (50+) drives

	select(undef,undef,undef,0.05); 
    }
    print "\n";
    print "waiting: ";

    while($process_manager->nChildren() > 0) {
	$process_manager->wait();
    }
    print "\n";
    if (@failed > 0) {
	print "Failed to format: ", join(" ", @failed), "\n";
	exit(1);
    }
}

sub fsckDrives {
    my @drives = findDrives();

    my %mounted = getMounted(1);

    my $process_manager = new Lintel::ProcessManager();

    my @failed;
    print "fscking in parallel: ";
    foreach my $drive (@drives) {
	my $partition = driveToPartition($drive);
	if ($mounted{$partition}) {
	    print "(mounted-$drive) ";
	    next;
	}
	print "$drive ";
	my $xpart = $partition;
	$xpart =~ s!/dev/!!o;
	$xpart =~ s!/!_!o;
	$process_manager->fork
	    (cmd => "fsck $partition -- -y",
	     exitfn => sub { my ($pid, $status) = @_;
			     
			     if ($status == 0 || ($status >> 8) == 1) {
				 # latter condition is errors corrected.
				 print "$drive ";
			     } else {
				 print "$drive(not-ok-$status) ";
				push(@failed, $drive);
			     }
			 },
	     stdout => "/tmp/fsck.$xpart",
	     stderr => 'STDOUT');
    }
    print "\n";
    print "waiting: ";

    while ($process_manager->nChildren() > 0) {
	$process_manager->wait();
    }
    print "\n";

    if (@failed > 0) {
	print "Failed to fsck (log as /tmp/fsck.partition): ", join(" ", @failed), "\n";
	exit(1);
    }
}

    
sub mountDrives {
    my @drives = findDrives();
    my %mounted = getMounted(1);
    my %revmounted = reverse %mounted;
    
    # TODO: handling missing mount path with existing label_to_mount_path fn
    die "Unable to mount drives, $config_path doesn't define mount_path"
	unless defined $config{mount_path};

    unless (-d $config{mount_path}) {
	mkpath($config{mount_path});
    }

    if (defined $config{clean_mounts_pattern}) {
	print "Cleaning...";

	my $dh = new DirHandle($config{mount_path});
	my @dirs = grep(/$config{clean_mounts_pattern}/o && !$mounted{$_}, readdir($dh));
	foreach my $dir (@dirs) {
	    next if $revmounted{$dir};
	    print " $dir";
	    rmdir("$config{mount_path}/$dir") 
		or die "Unable to rmdir $config{mount_path}/$dir: $!";
	}
	print " done\n";
    }

    my $count = 0;
    print "Mounting... ";
    foreach my $drive (@drives) {
	my $partition = driveToPartition($drive);

	my $label = getPartitionLabel($partition);

	die "Unable to mount $partition, missing label"
	    if $label eq '';

	if ($mounted{$partition}) {
	    die "$partition mounted on '$mounted{$partition}', not '$label'"
		unless $mounted{$partition} eq $label;
	    next;
	}

	my $path = call('label_to_mount_path', $label, $config{all_drives}->{$drive});
	if (defined $revmounted{$label}) {
	    print "(unmount $revmounted{$label} on $label) ";
	    my $ret = system("umount $path");
	    die "Umount failed ($ret)" unless $ret == 0;
	}
	unless (-d $path) {
	    mkdir($path, 0777) or die "unable to mkdir($path): $!";
	}

	print "$drive ";
	my $ret = system("mount $partition $path");
	die "mount failed" unless $ret == 0;
	if (defined $config{chmod_as}) {
	    system("chmod --reference=$config{chmod_as} $path") == 0
		or die "chmod of $path as $config{chmod_as} failed: $!";
	}
	++$count;
    }
    print "done.\n";
}

sub umountDrives {
    my (@to_umount) = @_;
    my %mounted = getMounted();

    if (@to_umount > 0) {
	grep(s!^$config{mount_path}/!!o, @to_umount);
	my %tmp = %mounted;
	%mounted = ();
	map { if (defined $tmp{$_}) {
	    $mounted{$_} = $tmp{$_}
	} else {
	    print "ignore $_, not mounted\n";
	} } @to_umount;
    }

    print "Unmounting...";
    my $first = 1;
    foreach my $mounted (sort bydriveorder keys %mounted) {
	print ", " unless $first;
	$first = 0;
	print "$mounted";
	my $ret = system("umount $config{mount_path}/$mounted");
	die "umount failed" unless $ret == 0;
	if (defined $config{clean_mounts_pattern} 
	    && $mounted =~ /$config{clean_mounts_pattern}/o) {
	    rmdir("$config{mount_path}/$mounted")
		or die "rmdir($config{mount_path}/$mounted) failed: $!";
	}
    }
    print "; " unless $first;
    print "done.\n";
}    

sub zeroDrives {
    die "Untested";
    my ($regex) = @_;

    if (defined $regex) {
	$regex = qr/$regex/;
    } else {
	$regex = qr/./;
    }
    my @drives = findDrives();
    die "no drives??" unless @drives > 0;

    my %mounted = getMounted();

    die "some drives are still mounted"
	if keys %mounted > 0;

    my %sizes = get_drive_sizes();

    @drives = grep(/$regex/, @drives);
    die "no drives remain after applying regex '$regex'"
	unless @drives > 0;

    map { die "no size info for drive $_" unless defined $sizes{$_} } @drives;

    print "zeroing drives (in parallel): ";
    my %children;
    my $ok = 1;
    foreach my $drive (@drives) {
	print ", " unless $drive eq $drives[0];
	my $size = $sizes{$drive};
	print "$drive";
	die "??" unless defined $size && $size->{cylinders} > 1000 && $size->{cylinder_bytes} > 1000000;
	my $pid = fork();
	unless (defined $pid && $pid >= 0) {
	    warn "\nfork failed: $!";
	    $ok = 0;
	    last;
	}
	if ($pid == 0) {
	    my $ret = system("dd if=/dev/zero of=/dev/${drive} bs=$size->{cylinder_bytes} count=$size->{cylinders} >/tmp/zero.${drive} 2>&1");
	    die "\ndd failed for /dev/${drive}" 
		unless $ret == 0;
	    # TODO: check output to verify we zeroed enough.
	    exit(0);
	}
	$children{$pid} = $drive;
	select(undef,undef,undef,0.1);
    }
    print "\n";
    print "waiting: ";
    my $first = 1;
    my %success;
    while((my $pid = wait) > 0) {
	print ", " unless $first;
	$first = 0;
	$children{$pid} ||= "UNKNOWN";
	print "$children{$pid}";
	$success{$children{$pid}} = 1;
	delete $children{$pid};
    }
    print "\n";
    foreach my $drive (@drives) {
	die "Failed to format $drive" unless $success{$drive};
    }
    die "Something wasn't ok" unless $ok;
}

=pod

=head2 visual-check

Read all of the drives, /dev/sda .. /dev/sdzz in series, with a pause for
user input between pairs so that they can verify the the drives are accessed
in the "right" order.

=cut

sub visualCheck {
    # foreach my $i ('a' .. 'z', 'aa' .. 'zz') {    
    die "Unimplemented";
}


# TODO: need a repurpose <prefix> type option that will zero out drives that
# have the specified label -- needed when we move drives from one use to 
# another.

##### Common functions


# Returns map of directory under $config{mount_path} to the full parition path under /dev;
# or the reverse if $dev_to_mount_path is set
sub getMounted {
    my ($dev_to_mount_path) = @_;

    readConfig();

    die "Can't get mounted, $config_path does not define mount_path"
	unless defined $config{mount_path};
    my %mounted;
    open(MOUNT, "mount |") or die "??";
    while(<MOUNT>) {
	if (m!^(/dev/\S+1) on $config{mount_path}/([^/ ]+) type \S+ \S+$!o) {
	    die "Two things mounted on $2: $mounted{$2} and $1"
		if defined $mounted{$2};
	    $mounted{$2} = $1;
	    print "Found mounted $1 -> $2\n" if $config{debug};
	} else {
	    print "Not mounted pattern ($config{mount_path}): $_" if $config{debug};
	}
    }
    close(MOUNT);
    my %rev;
    while (my ($k,$v) = each %mounted) {
	die "$v mounted on two things, $k and $rev{$v}" if defined $rev{$v};
	$rev{$v} = $k;
    }
    if ($dev_to_mount_path) {
	return %rev;
    } else {
	return %mounted;
    }
}


sub get_ok_partitions {
    my($ok, $sizes) = get_sfdisk_info();
    return %$ok;
}

sub get_drive_sizes {
    my($ok, $sizes) = get_sfdisk_info();
    return %$sizes;
}

sub failDrives {
    my (@which) = @_;

    my $destroy = 0;
    if ($which[0] eq 'destroy') {
	$destroy = 1;
	shift @which;
    }

    readConfig();
    grep(s!^$config{mount_path}/!!o, @which);
    die "No paths to fail" unless @which > 0;

    my %mounted = getMounted();

    map { die "$_ is not mounted" unless $mounted{$_};
	  die "can only handle sd[a-z]+1 paritions" unless $mounted{$_} =~ m!^/dev/sd[a-z]+1!o; 
      } @which;
    
    my %scsiadd_args;
    my %device;
    foreach my $mountpoint (@which) {
	my $partition = $mounted{$mountpoint};
	
	$partition =~ s!^/dev/(sd[a-z]+)1$!$1!o;
	$device{$mountpoint} = "/dev/$partition";
	my $dev_path = readlink("/sys/block/$partition/device")
	    or die "Can't readlink /sys/block/$partition/device: $!";

	die "duplicate $mountpoint"
	    if defined $scsiadd_args{$mountpoint};
	die "can't parse $dev_path"
	    unless $dev_path =~ m!/target\d+:\d+:\d+/(\d+):(\d+):(\d+):(\d+)$!o;
	$scsiadd_args{$mountpoint} = "$1 $2 $3 $4";

	print "scsi-info: $partition -> $dev_path -> $scsiadd_args{$mountpoint}\n"
	    if $config{debug};
    }

    foreach my $mountpoint (@which) {
	if ($destroy) {
	    my $device = $device{$mountpoint};
	    print "Destroying $mountpoint ($device)\n";
	    
	    my $ret = system("dd if=/dev/zero of=$device bs=1024k count=10 oflag=direct,sync >/tmp/lintel-disktool.log 2>&1");
	    die "dd failed ($ret)" unless $ret == 0;
	}

	print "Failing $mountpoint ($scsiadd_args{$mountpoint})\n";
	my $cmd = "scsiadd -r $scsiadd_args{$mountpoint} >/tmp/lintel-disktool.log 2>&1";
	my $ret = system($cmd);
	die "$cmd failed ($ret)" unless $ret == 0;
    }
}

sub getSpecificSfdiskInfo {
    my ($diskpath) = @_;
    my %ok;
    my %sizes;
    open(SFDISK, "sfdisk -uS -l $diskpath 2>&1 |") or die "bad";
    while(<SFDISK>) {
	die "??1 '$_'" unless /^\s*$/o;
	$_ = <SFDISK>;
	die "?? $_ ??" unless m!^Disk /dev/(\S+): (\d+) cylinders, (\d+) heads, (\d+) sectors/track!o;
	my ($drive, $cylinders, $heads, $sectorspercyl) = ($1,$2, $3, $4);
	$sizes{$drive} = {'cylinders' => $cylinders, 'heads' => $heads, 
			  'sectors_per_cylinder' => $sectorspercyl, 'sector_bytes' => 512,
			  'cylinder_bytes' => $heads * $sectorspercyl * 512};
	$_ = <SFDISK>;
	if (/^Warning: The partition table/o) {
	    $_ = <SFDISK>; die "??" unless m!^  for C/H/S=!o;
	    $_ = <SFDISK>; die "??" unless m!^For this listing I'll assume!o;
	    $_ = <SFDISK>;
	}
	if (/^$/o) {
	    $_ = <SFDISK>;
	    die "??" unless /^sfdisk: ERROR: sector 0 does not have an msdos signature/o;
	    $_ = <SFDISK>;
	    die "??" unless m!^ /dev/${drive}: unrecognized partition table type!;
	    $_ = <SFDISK>;
	    die "??" unless /^No partitions found/o;
	    next;
	}
	die "$_ ?? " unless m!^Units = sectors of 512 bytes, counting from 0$!o;
	$_ = <SFDISK>;
	die "??" unless /^\s*$/o;
	$_ = <SFDISK>;
	die "$_ ??" unless /^   Device Boot    Start       End   #sectors  Id  System$/o;
	$_ = <SFDISK>;
	die "?? $drive\n$_ ??" unless m!^/dev/${drive}p?1\s+!;
	my @bits = split(/\s+/o);

	# Since we will not have DOS access these disks and we don't
	# boot from them, don't waste the little bit of space at the
	# front.  Every bit helps.

	my $expected_sectors = 1.0 * $cylinders * $heads * $sectorspercyl - 1;
	printf "Maybe %d; $bits[1] == 1; $bits[2] == %.0f; $bits[3] == %.0f\n", 
   	    scalar @bits, $expected_sectors, $expected_sectors 
		if $config{debug};
	if (-b $bits[0] && @bits == 6 && $bits[1] =~ /^\d+$/o && $bits[1] == 1
	    && $bits[2] =~ /^\d+$/o && $bits[2] == $expected_sectors 
	    && $bits[3] =~ /^\d+$/o && $bits[3] == $expected_sectors) {
	    $ok{$drive} = 1;
	}
	foreach my $pnum (qw/2 3 4/) {
	    $_ = <SFDISK>;
	    # Skip warnings about non-aligned partitions
	    $_ = <SFDISK> if /^\s+start: .c,h,s. expected /o; 
	    $_ = <SFDISK> if /^\s+end: .c,h,s. expected /o; 
	    die "sfdisk parse error for $diskpath $_ "
		unless m!^/dev/${drive}p?$pnum\s+!;
	}
    }
    close(SFDISK);
    return (\%ok, \%sizes);
}    

sub get_sfdisk_info { 
    # The old get_sfdisk_info would ask about every drive, even ones
    # we're not supposed to touch.  If a drive was listed don't touch
    # because it is broken, we were still probing it; this makes the
    # parsing uphappy.  Rather than make the parsing tolerate broken
    # drives, we'll still choke on a broken drive, and instead try to
    # probe only those drives listed as OK to poke.

    my @drives = findDrives();
    my %ok;
    my %sizes;

    # We're getting 1 (or more, but probably 1) sfdisk_info from
    # getSpecificSfdiskInfo, then appending it to ok and sizes; the pattern
    # to append to the hashes was taken from:
    # http://stackoverflow.com/questions/350018/how-can-i-combine-hashes-in-perl/350190

    foreach my $drive (@drives) {
	my($tempOK, $tempSizes) = getSpecificSfdiskInfo("/dev/$drive");
	@ok{keys %$tempOK} = values %$tempOK;
	@sizes{keys %$tempSizes} = values %$tempSizes;
    }
    return (\%ok, \%sizes);
}

# There are lots of different unique serial numbers; some aren't very
# good.  blkid and vol_id are both filesystem related (ext series
# generally) and not tied to the block device.  If the device never
# had an ext filesystem (or was zeroed) it won't have a blkid or
# vol_id. udevinfo gives inconsistent results; sometimes it returns
# information tied to the first partition, sometimes it gives another
# number, and sometimes it gives nothing at all.

# Right now we use the scsi id (through sginfo) and the sysfs device
# id.  The sysfs id is related to the attachment point (PCI bus id:
# SAS port:target:expander id:expander port id:etc) more than the
# block device, but it is better than the other bad alternatives.

# TODO-sprint: Change unique id number code to guess at the type of
# device and specifically use the correct type of serial number.  That
# is, for SCSI devices use sginfo, for cciss use hpaculi, for md
# arrays use mdadm, for sillyProprietary use sillyProprietaryUtil,
# etc.  We probably want scsi, Pxxx, lvm, and md, and probably roughly
# in that order.  Think about whether we want to leave the sysfsid code in
# as a fallback which is better than "no-serial".

sub serialNumber {
    my($drive) = @_;

    $drive =~ s!^/dev/!!o;
    my $ret;
    open(SGINFO, "sginfo -s /dev/$drive 2>&1 |")
	or die "bad";
    $_ = <SGINFO>;
    if (!defined $_) {
	$ret = undef;
    } elsif (/^Serial Number '(.+?)\s*'$/) {
	$ret = $1;
    } elsif (/^Error doing INQUIRY/o) {
	$ret = undef;
    } elsif (/^A device name that understands SCSI/o) {
	$ret = undef;
    } else {
	chomp;
	die "First line from sginfo -s /dev/$drive not 'Serial Number ...', but '$_'";
    }
    close(SGINFO);
    return $ret;
}

sub sysfsIdNumber {
    my ($drive) = @_;

    $drive =~ s!^/dev/!!o;
    $drive =~ s,/,!,o;
    my $ret;

    my $fh = new FileHandle "readlink /sys/block/$drive/device |"
	or die "Unable to readlink sysfs for $drive: $!";
    local $_ = <$fh>;  chomp;
    if (m,^\.\./\.\./devices/(\S+)\s*$,o) {
	$ret = $1;
    } else {
	# ignore
    }
    close($fh);
    
    return $ret;
}

sub is_drive { # not partition
    my ($drive) = @_;

    $drive =~ s!^/dev/!!o;
    my @stat = stat("/dev/$drive");
    die "Stat of /dev/$drive failed: $!"
	unless @stat;

    die "$config_path pattern matched $drive, which is a partition, not a drive"
	unless 0 == ($stat[6] & 0xF);
}

sub call {
    my $fn = shift @_;

    die "Configuration function $fn is not defined"
	unless defined $config{$fn} && ref $config{$fn} eq 'CODE';
    my $ret = eval "&{\$config{$fn}}(\@_)";

    die "$fn configuration function failed: $@"
	if $@;

    return $ret;
}

