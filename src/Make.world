#
#  (c) Copyright 2000-2005, Hewlett-Packard Development Company, LP
#
#  See the file named COPYING for license details
#
# Makefile for building all SSP tools


# Sort the subdirs in dependency order.
BUILD_SUBDIRS ?= Lintel PantheonLintel Rome srtLite Delphi Ergastulum Panopticon \
	Buttress Rubicon Raphael Pantheon Hippodrome Plebians \
	Mercury Peregrinatio
CLEAN_SUBDIRS ?= $(BUILD_SUBDIRS) 
REGRESSION_SUBDIRS ?= $(BUILD_SUBDIRS)
UPDATE_SUBDIRS ?= $(BUILD_SUBDIRS) 
MAKEFLAGS += --no-print-directory
SSPCVSROOT ?= /mount/cello/cvs

help:
	@echo "gmake -f .../Make.world"
	@echo "    build -- build in existing subdirectories"
	@echo "    clean -- clean in existing subdirectories"
	@echo "    regression -- run regression tests in existing subdirectories"
	@echo "    update -- run cvs update in existing subdirectories"
	@echo "    update-check -- find changed files without changing anything"
	@echo "    checkout_{Lintel,srtLite,Rome,Pantheon,Ergastulum,"
	@echo "              Pylon,Rubicon,Buttress,Hippodrome}"
	@echo "        -- checkout a package plus any packages it requires"
	@echo ""
	@echo "SSPCVSROOT = $(SSPCVSROOT)"
	@echo "Possible directories for:"
	@echo "  build: $(BUILD_SUBDIRS)"
	@echo "  clean: $(CLEAN_SUBDIRS)"
	@echo "  regression: $(REGRESSION_SUBDIRS)"
	@echo "  update: $(UPDATE_SUBDIRS)"
	@echo "using -j8 (or so) to run 8 parallel jobs speeds up builds"

build:
	for i in $(BUILD_SUBDIRS); do \
		if [ -d $$i ]; then \
		        cd $$i; \
			echo "*** Building in $$i"; \
			if [ -f Makefile.local.template ]; then \
				echo "Running mk-config -f in $$i"; \
				[ -f Makefile.local ] && mv Makefile.local Makefile.local.bak; \
				../PantheonLintel/tools/mk-config -f; \
				if [ -f Makefile.local.bak ]; then \
				        if cmp Makefile.local.bak Makefile.local; then \
					         rm Makefile.local; \
					         mv Makefile.local.bak Makefile.local; \
					fi; \
					[ -f Makefile.local.bak ] && rm Makefile.local.bak; \
				fi; \
			fi; \
			$(MAKE) build || exit 1; \
			[ "$$i" = "Pantheon" ] && $(MAKE) install; \
			[ "$$i" = "PantheonLintel" ] && $(MAKE) install; \
			[ "$$i" = "Raphael" ] && $(MAKE) install; \
			cd ..; \
		fi; \
	done

clean:
	for i in $(CLEAN_SUBDIRS); do \
		if [ -d $$i ]; then \
			echo "Cleaning in $$i"; \
			(cd $$i; $(MAKE) clean) || exit 1; \
		fi; \
	done
	-rm -rf bin lib tcl include

regression:
	for i in $(REGRESSION_SUBDIRS); do \
		if [ -d $$i ]; then \
			echo "Makeing regression in $$i"; \
			(cd $$i; $(MAKE) regression) || exit 1; \
		fi; \
	done

update:
	for i in $(UPDATE_SUBDIRS); do \
	        if [ -d $$i ]; then \
			echo "Running cvs update in $$i"; \
		        (cd $$i; cvs update -d) || exit 1; \
		fi; \
	done

update-check:
	for i in $(UPDATE_SUBDIRS); do \
	        if [ -d $$i ]; then \
		        (cd $$i; cvs -n update -d 2>&1 | perl -e 'while(<STDIN>) { next if /^cvs update:/o || /^cvs server: Updating /o;s/^(.) /$$1 $$ARGV[0]/o;print; }' $$i/) \
		fi; \
	done

checkout_Lintel:
	cvs -d $(SSPCVSROOT) checkout Lintel 

checkout_srtLite: checkout_Lintel
	cvs -d $(SSPCVSROOT) checkout srtLite

checkout_Rome: checkout_Lintel
	cvs -d $(SSPCVSROOT) checkout Rome

checkout_Pantheon: checkout_srtLite
	cvs -d $(SSPCVSROOT) checkout PantheonLintel
	cvs -d $(SSPCVSROOT) checkout Raphael
	cvs -d $(SSPCVSROOT) checkout Pantheon

checkout_Pylon: checkout_srtLite
	cvs -d $(SSPCVSROOT) checkout PantheonLintel
	cvs -d $(SSPCVSROOT) checkout Pylon

checkout_Ergastulum: checkout_Lintel checkout_Rome checkout_Delphi
	cvs -d $(SSPCVSROOT) checkout Ergastulum

checkout_Rubicon: checkout_Lintel checkout_srtLite
	cvs -d $(SSPCVSROOT) checkout Rubicon

checkout_Buttress: checkout_Rome
	cvs -d $(SSPCVSROOT) checkout Buttress

checkout_Delphi: checkout_Lintel checkout_Rome
	cvs -d $(SSPCVSROOT) checkout Delphi
		 
checkout_Hippodrome: checkout_Ergastulum checkout_Buttress checkout_Rubicon
	cvs -d $(SSPCVSROOT) checkout Mercury
	cvs -d $(SSPCVSROOT) checkout Panopticon
	cvs -d $(SSPCVSROOT) checkout Peregrinatio
	cvs -d $(SSPCVSROOT) checkout Hippodrome
